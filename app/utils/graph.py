"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
"""
import io
import logging
from datetime import datetime, timedelta
from typing import List, Optional

import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.figure import Figure

from app.models.domain import WarmingHistory

logger = logging.getLogger(__name__)


class GraphGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8-darkgrid')
        
    def generate_response_time_graph(
        self,
        history: List[WarmingHistory],
        domain_name: str,
        period: str = "24h"
    ) -> Optional[io.BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
            period: –ü–µ—Ä–∏–æ–¥ ("24h", "7d", "30d")
        
        Returns:
            BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not history:
                logger.warning("No history data to generate graph")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            timestamps = [h.started_at for h in history]
            avg_times = [h.avg_response_time for h in history]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            ax.plot(timestamps, avg_times, marker='o', linestyle='-', 
                   linewidth=2, markersize=6, color='#2E86AB', label='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ª–∏–≤–∫—É –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            ax.fill_between(timestamps, avg_times, alpha=0.3, color='#2E86AB')
            
            # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            mean_time = sum(avg_times) / len(avg_times)
            ax.axhline(y=mean_time, color='red', linestyle='--', 
                      linewidth=1, alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_time:.2f}s')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
            ax.set_xlabel('–í—Ä–µ–º—è', fontsize=12, fontweight='bold')
            ax.set_ylabel('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)', fontsize=12, fontweight='bold')
            ax.set_title(f'üìä –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞ {domain_name}', 
                        fontsize=14, fontweight='bold', pad=20)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X (–≤—Ä–µ–º–µ–Ω–∏)
            if len(timestamps) > 20:
                ax.xaxis.set_major_locator(mdates.AutoDateLocator())
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m %H:%M'))
            plt.xticks(rotation=45, ha='right')
            
            # –°–µ—Ç–∫–∞
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.legend(loc='upper left', fontsize=10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            info_text = (
                f"–ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(history)}\n"
                f"–ú–∏–Ω: {min(avg_times):.2f}s\n"
                f"–ú–∞–∫—Å: {max(avg_times):.2f}s\n"
                f"–°—Ä–µ–¥–Ω: {mean_time:.2f}s"
            )
            ax.text(0.98, 0.98, info_text, transform=ax.transAxes,
                   fontsize=9, verticalalignment='top', horizontalalignment='right',
                   bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            plt.close(fig)
            
            logger.info(f"Generated response time graph for {domain_name}")
            return buf
            
        except Exception as e:
            logger.error(f"Error generating graph: {e}", exc_info=True)
            return None
    
    def generate_success_rate_graph(
        self,
        history: List[WarmingHistory],
        domain_name: str
    ) -> Optional[io.BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
        
        Returns:
            BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not history:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            timestamps = [h.started_at for h in history]
            success_rates = [
                (h.successful_requests / h.total_requests * 100) if h.total_requests > 0 else 0
                for h in history
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            colors = ['green' if rate >= 90 else 'orange' if rate >= 70 else 'red' 
                     for rate in success_rates]
            
            ax.plot(timestamps, success_rates, marker='o', linestyle='-',
                   linewidth=2, markersize=6, color='#06A77D', label='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å')
            
            # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
            ax.scatter(timestamps, success_rates, c=colors, s=50, zorder=5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ª–∏–≤–∫—É
            ax.fill_between(timestamps, success_rates, alpha=0.3, color='#06A77D')
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π
            ax.axhline(y=90, color='green', linestyle='--', linewidth=1, alpha=0.5, label='90% (–æ—Ç–ª–∏—á–Ω–æ)')
            ax.axhline(y=70, color='orange', linestyle='--', linewidth=1, alpha=0.5, label='70% (–Ω–æ—Ä–º–∞)')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
            ax.set_xlabel('–í—Ä–µ–º—è', fontsize=12, fontweight='bold')
            ax.set_ylabel('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)', fontsize=12, fontweight='bold')
            ax.set_title(f'‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {domain_name}',
                        fontsize=14, fontweight='bold', pad=20)
            ax.set_ylim(0, 105)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
            if len(timestamps) > 20:
                ax.xaxis.set_major_locator(mdates.AutoDateLocator())
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m %H:%M'))
            plt.xticks(rotation=45, ha='right')
            
            # –°–µ—Ç–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.legend(loc='lower left', fontsize=10)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_success = sum(success_rates) / len(success_rates)
            info_text = (
                f"–ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(history)}\n"
                f"–ú–∏–Ω: {min(success_rates):.1f}%\n"
                f"–ú–∞–∫—Å: {max(success_rates):.1f}%\n"
                f"–°—Ä–µ–¥–Ω: {avg_success:.1f}%"
            )
            ax.text(0.98, 0.98, info_text, transform=ax.transAxes,
                   fontsize=9, verticalalignment='top', horizontalalignment='right',
                   bbox=dict(boxstyle='round', facecolor='lightgreen', alpha=0.8))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            
            logger.info(f"Generated success rate graph for {domain_name}")
            return buf
            
        except Exception as e:
            logger.error(f"Error generating success rate graph: {e}", exc_info=True)
            return None
    
    def generate_combined_graph(
        self,
        history: List[WarmingHistory],
        domain_name: str
    ) -> Optional[io.BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–≤—Ä–µ–º—è + —É—Å–ø–µ—à–Ω–æ—Å—Ç—å)
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
        
        Returns:
            BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not history:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            timestamps = [h.started_at for h in history]
            avg_times = [h.avg_response_time for h in history]
            success_rates = [
                (h.successful_requests / h.total_requests * 100) if h.total_requests > 0 else 0
                for h in history
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # === –ì—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ===
            ax1.plot(timestamps, avg_times, marker='o', linestyle='-',
                    linewidth=2, markersize=5, color='#2E86AB', label='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è')
            ax1.fill_between(timestamps, avg_times, alpha=0.3, color='#2E86AB')
            
            mean_time = sum(avg_times) / len(avg_times)
            ax1.axhline(y=mean_time, color='red', linestyle='--',
                       linewidth=1, alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_time:.2f}s')
            
            ax1.set_ylabel('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)', fontsize=11, fontweight='bold')
            ax1.set_title(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è {domain_name}',
                         fontsize=14, fontweight='bold', pad=15)
            ax1.grid(True, alpha=0.3, linestyle='--')
            ax1.legend(loc='upper left', fontsize=9)
            
            # === –ì—Ä–∞—Ñ–∏–∫ 2: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å ===
            colors = ['green' if rate >= 90 else 'orange' if rate >= 70 else 'red'
                     for rate in success_rates]
            
            ax2.plot(timestamps, success_rates, marker='o', linestyle='-',
                    linewidth=2, markersize=5, color='#06A77D', label='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å')
            ax2.scatter(timestamps, success_rates, c=colors, s=40, zorder=5)
            ax2.fill_between(timestamps, success_rates, alpha=0.3, color='#06A77D')
            
            ax2.axhline(y=90, color='green', linestyle='--', linewidth=1, alpha=0.5)
            ax2.axhline(y=70, color='orange', linestyle='--', linewidth=1, alpha=0.5)
            
            ax2.set_xlabel('–í—Ä–µ–º—è', fontsize=11, fontweight='bold')
            ax2.set_ylabel('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)', fontsize=11, fontweight='bold')
            ax2.set_ylim(0, 105)
            ax2.grid(True, alpha=0.3, linestyle='--')
            ax2.legend(loc='lower left', fontsize=9)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X –¥–ª—è –æ–±–æ–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
            for ax in [ax1, ax2]:
                if len(timestamps) > 20:
                    ax.xaxis.set_major_locator(mdates.AutoDateLocator())
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m %H:%M'))
                plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            
            logger.info(f"Generated combined graph for {domain_name}")
            return buf
            
        except Exception as e:
            logger.error(f"Error generating combined graph: {e}", exc_info=True)
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
graph_generator = GraphGenerator()

