"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""
import asyncio
import logging
from typing import Dict, Optional, Any
from datetime import datetime

from app.core.warmer import warmer
from app.core.db import db_manager

logger = logging.getLogger(__name__)


class WarmingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    
    def __init__(self):
        self.active_tasks: Dict[int, asyncio.Task] = {}  # domain_id -> Task
        self.task_info: Dict[int, Dict[str, Any]] = {}  # domain_id -> info
    
    def is_warming(self, domain_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤ –¥–æ–º–µ–Ω–∞"""
        if domain_id in self.active_tasks:
            task = self.active_tasks[domain_id]
            return not task.done()
        return False
    
    def get_active_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤"""
        # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self._cleanup_completed_tasks()
        return len(self.active_tasks)
    
    def _cleanup_completed_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        completed = [
            domain_id for domain_id, task in self.active_tasks.items()
            if task.done()
        ]
        for domain_id in completed:
            del self.active_tasks[domain_id]
            if domain_id in self.task_info:
                del self.task_info[domain_id]
    
    async def start_warming(
        self,
        domain_id: int,
        domain_name: str,
        urls: list,
        user_id: Optional[int] = None,
        bot=None
    ) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–æ–º–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
        Args:
            domain_id: ID –¥–æ–º–µ–Ω–∞
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
            urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω, False –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ–≤ —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
        if self.is_warming(domain_id):
            logger.warning(f"Domain {domain_name} is already being warmed")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥—Ä–µ–≤–∞
        task = asyncio.create_task(
            self._warm_domain_task(domain_id, domain_name, urls, user_id, bot)
        )
        
        self.active_tasks[domain_id] = task
        self.task_info[domain_id] = {
            "domain_name": domain_name,
            "start_time": datetime.utcnow(),
            "user_id": user_id,
            "urls_count": len(urls)
        }
        
        logger.info(f"üöÄ Started warming task for {domain_name} (domain_id={domain_id})")
        return True
    
    async def _warm_domain_task(
        self,
        domain_id: int,
        domain_name: str,
        urls: list,
        user_id: Optional[int],
        bot
    ):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–æ–º–µ–Ω–∞"""
        try:
            logger.info(f"üî• Warming {domain_name} ({len(urls)} URLs)")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤ (–ø–µ—Ä–µ–¥–∞–µ–º –∏–º—è –¥–æ–º–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            stats = await warmer.warm_site(urls, domain_name=domain_name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            success_rate = (stats["success"] / stats["total_requests"] * 100) if stats["total_requests"] > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏
            if success_rate >= 90:
                status_emoji = "‚úÖ"
            elif success_rate >= 70:
                status_emoji = "‚ö†Ô∏è"
            else:
                status_emoji = "‚ùå"
            
            message = (
                f"{status_emoji} <b>–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                f"üïí –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>\n"
                f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{stats['success']}</b> ({success_rate:.1f}%)\n"
                f"‚Ä¢ ‚è± –¢–∞–π–º–∞—É—Ç—ã: <b>{stats['timeout']}</b>\n"
                f"‚Ä¢ ‚ùå –û—à–∏–±–∫–∏: <b>{stats['error']}</b>\n"
                f"‚Ä¢ ‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>{stats['avg_time']:.2f}s</b>\n"
                f"‚Ä¢ ‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{stats['total_time']:.2f}s</b>"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–º—É –ø—Ä–æ–≥—Ä–µ–≤
            if bot and user_id:
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Error sending notification to user {user_id}: {e}")
            
            logger.info(f"‚úÖ Completed warming {domain_name}: {stats}")
            
        except Exception as e:
            logger.error(f"‚ùå Error warming {domain_name}: {e}", exc_info=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if bot and user_id:
                try:
                    error_message = (
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
                        f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
                    )
                    await bot.send_message(
                        chat_id=user_id,
                        text=error_message,
                        parse_mode="HTML"
                    )
                except Exception as send_error:
                    logger.error(f"Error sending error notification: {send_error}")
        
        finally:
            # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–µ
            pass
    
    async def stop_warming(self, domain_id: int) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–æ–º–µ–Ω–∞
        
        Args:
            domain_id: ID –¥–æ–º–µ–Ω–∞
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        """
        if domain_id not in self.active_tasks:
            return False
        
        task = self.active_tasks[domain_id]
        if not task.done():
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            logger.info(f"‚èπ Stopped warming for domain_id={domain_id}")
        
        del self.active_tasks[domain_id]
        if domain_id in self.task_info:
            del self.task_info[domain_id]
        
        return True
    
    def get_warming_info(self, domain_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ–≤–µ –¥–æ–º–µ–Ω–∞"""
        if domain_id not in self.task_info:
            return None
        
        info = self.task_info[domain_id].copy()
        info["is_active"] = self.is_warming(domain_id)
        
        if info["is_active"]:
            elapsed = (datetime.utcnow() - info["start_time"]).total_seconds()
            info["elapsed_seconds"] = elapsed
        
        return info
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤"""
        logger.info("Stopping all warming tasks...")
        
        for domain_id in list(self.active_tasks.keys()):
            await self.stop_warming(domain_id)
        
        logger.info("All warming tasks stopped")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
warming_manager = WarmingManager()

