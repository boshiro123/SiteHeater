"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞
"""
import asyncio
import logging
from typing import Dict, Optional, TYPE_CHECKING
from datetime import datetime

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from app.config import config
from app.core.db import db_manager
from app.core.warmer import warmer

if TYPE_CHECKING:
    from aiogram import Bot

logger = logging.getLogger(__name__)


class WarmingScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.job_map: Dict[int, str] = {}  # domain_id -> apscheduler_job_id
        self.bot: Optional['Bot'] = None
    
    def set_bot(self, bot: 'Bot') -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = bot
        logger.info("Bot instance set for scheduler")
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logger.info("Scheduler started")
    
    def shutdown(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("Scheduler stopped")
    
    def parse_schedule(self, schedule: str) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        –§–æ—Ä–º–∞—Ç: "5m", "1h", "30m" –∏ —Ç.–¥.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è IntervalTrigger
        """
        if not schedule:
            return None
        
        schedule = schedule.strip().lower()
        
        try:
            if schedule.endswith('m'):
                minutes = int(schedule[:-1])
                return {"minutes": minutes}
            elif schedule.endswith('h'):
                hours = int(schedule[:-1])
                return {"hours": hours}
            elif schedule.endswith('s'):
                seconds = int(schedule[:-1])
                return {"seconds": seconds}
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç—ã
                minutes = int(schedule)
                return {"minutes": minutes}
        except ValueError:
            logger.error(f"Invalid schedule format: {schedule}")
            return None
    
    async def warm_domain_task(self, domain_id: int, job_id: int) -> None:
        """–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–æ–º–µ–Ω–∞"""
        try:
            logger.info(f"‚è∞ Scheduled warming task for domain_id={domain_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω —Å URL
            domain = await db_manager.get_domain_by_id(domain_id)
            
            if not domain or not domain.is_active:
                logger.warning(f"Domain {domain_id} not found or inactive, removing job")
                self.remove_job(domain_id)
                return
            
            if not domain.urls:
                logger.warning(f"No URLs for domain {domain_id}")
                return
            
            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º
            urls = [url.url for url in domain.urls]
            stats = await warmer.warm_site(urls)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            await db_manager.update_job_last_run(job_id)
            
            logger.info(f"‚úÖ Scheduled warming completed for {domain.name}: {stats}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
            if config.SEND_WARMING_NOTIFICATIONS and self.bot and domain.user_id:
                await self._send_warming_notification(domain, stats)
            
        except Exception as e:
            logger.error(f"Error in scheduled warming task for domain {domain_id}: {e}", exc_info=True)
    
    async def _send_warming_notification(self, domain, stats: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ–≤–µ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            success_rate = (stats["success"] / stats["total_requests"] * 100) if stats["total_requests"] > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            if success_rate >= 90:
                status_emoji = "‚úÖ"
            elif success_rate >= 70:
                status_emoji = "‚ö†Ô∏è"
            else:
                status_emoji = "‚ùå"
            
            message = (
                f"{status_emoji} <b>–ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
                f"üïí –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>\n"
                f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{stats['success']}</b> ({success_rate:.1f}%)\n"
                f"‚Ä¢ ‚è± –¢–∞–π–º–∞—É—Ç—ã: <b>{stats['timeout']}</b>\n"
                f"‚Ä¢ ‚ùå –û—à–∏–±–∫–∏: <b>{stats['error']}</b>\n"
                f"‚Ä¢ ‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>{stats['avg_time']:.2f}s</b>\n"
                f"‚Ä¢ ‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{stats['total_time']:.2f}s</b>"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await db_manager.get_all_active_users()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sent_count = 0
            for user in users:
                try:
                    await self.bot.send_message(
                        chat_id=user.id,
                        text=message,
                        parse_mode="HTML"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.warning(f"Failed to send notification to user {user.id}: {e}")
            
            logger.info(f"üì§ Notification sent to {sent_count}/{len(users)} users for domain {domain.name}")
            
        except Exception as e:
            logger.error(f"Error sending notifications: {e}", exc_info=True)
    
    def add_job(self, domain_id: int, job_id: int, schedule: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            self.remove_job(domain_id)
            
            # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            interval_params = self.parse_schedule(schedule)
            
            if not interval_params:
                logger.error(f"Failed to parse schedule: {schedule}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            trigger = IntervalTrigger(**interval_params)
            
            apscheduler_job = self.scheduler.add_job(
                self.warm_domain_task,
                trigger=trigger,
                args=[domain_id, job_id],
                id=f"warm_domain_{domain_id}",
                replace_existing=True,
            )
            
            self.job_map[domain_id] = apscheduler_job.id
            
            logger.info(f"‚úÖ Added scheduled job for domain {domain_id}: {schedule}")
            return True
            
        except Exception as e:
            logger.error(f"Error adding job for domain {domain_id}: {e}", exc_info=True)
            return False
    
    def remove_job(self, domain_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if domain_id in self.job_map:
                job_id = self.job_map[domain_id]
                self.scheduler.remove_job(job_id)
                del self.job_map[domain_id]
                logger.info(f"‚úÖ Removed scheduled job for domain {domain_id}")
                return True
            return False
        except Exception as e:
            logger.error(f"Error removing job for domain {domain_id}: {e}")
            return False
    
    async def reload_jobs(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã"""
        logger.info("Reloading scheduled jobs from database...")
        
        try:
            active_jobs = await db_manager.get_active_jobs()
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
            for domain_id in list(self.job_map.keys()):
                self.remove_job(domain_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for job in active_jobs:
                if job.schedule:
                    self.add_job(job.domain_id, job.id, job.schedule)
            
            logger.info(f"‚úÖ Reloaded {len(active_jobs)} scheduled jobs")
            
        except Exception as e:
            logger.error(f"Error reloading jobs: {e}", exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
warming_scheduler = WarmingScheduler()

