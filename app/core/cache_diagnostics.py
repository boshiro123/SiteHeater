"""
–ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç—ã–≤–∞–Ω–∏—è –∫—ç—à–∞
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import statistics

import httpx

from app.core.db import db_manager

logger = logging.getLogger(__name__)


class CacheDiagnostics:
    """–ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç—ã–≤–∞–Ω–∏—è –∫—ç—à–∞"""
    
    def __init__(self):
        self.active_diagnostics: Dict[int, asyncio.Task] = {}  # domain_id -> Task
    
    async def measure_response_time(self, url: str, timeout: int = 30) -> Optional[float]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –æ–¥–Ω–æ–≥–æ URL"""
        try:
            async with httpx.AsyncClient(
                headers={
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                },
                timeout=timeout,
                follow_redirects=True
            ) as client:
                start_time = datetime.utcnow()
                response = await client.get(url)
                elapsed = (datetime.utcnow() - start_time).total_seconds()
                
                if response.status_code == 200:
                    return elapsed
                return None
        except Exception as e:
            logger.debug(f"Error measuring {url}: {e}")
            return None
    
    async def run_diagnostic_test(
        self,
        domain_id: int,
        domain_name: str,
        urls: List[str],
        test_intervals: List[int],
        sample_size: int = 10,
        bot=None,
        user_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞
        
        Args:
            domain_id: ID –¥–æ–º–µ–Ω–∞
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
            urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_intervals: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö [0, 5, 10, 15, 20, 30]
            sample_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
            bot: –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"üî¨ Starting cache diagnostics for {domain_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            if bot and user_id:
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"üî¨ <b>–ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫—ç—à–∞</b>\n\n"
                        f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                        f"üß™ –¢–µ—Å—Ç–æ–≤: <b>{len(test_intervals)}</b>\n"
                        f"üìä –í—ã–±–æ—Ä–∫–∞: <b>{sample_size}</b> URL\n\n"
                        f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç ~{max(test_intervals)} –º–∏–Ω—É—Ç"
                    ),
                    parse_mode="HTML"
                )
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É URL
            import random
            sample_urls = random.sample(urls, min(sample_size, len(urls)))
            
            results = []
            
            for interval_minutes in test_intervals:
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º
                if interval_minutes > 0:
                    logger.info(f"‚è∞ Waiting {interval_minutes} minutes before next test...")
                    await asyncio.sleep(interval_minutes * 60)
                
                logger.info(f"üß™ Test at T+{interval_minutes}m: measuring {len(sample_urls)} URLs")
                
                # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
                test_start = datetime.utcnow()
                times = []
                
                for url in sample_urls:
                    response_time = await self.measure_response_time(url)
                    if response_time:
                        times.append(response_time)
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                
                if times:
                    avg_time = statistics.mean(times)
                    median_time = statistics.median(times)
                    
                    results.append({
                        "interval_minutes": interval_minutes,
                        "timestamp": test_start,
                        "avg_time": avg_time,
                        "median_time": median_time,
                        "sample_count": len(times),
                        "times": times
                    })
                    
                    logger.info(
                        f"üìä T+{interval_minutes}m: "
                        f"avg={avg_time:.3f}s, median={median_time:.3f}s"
                    )
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            analysis = self._analyze_results(results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if bot and user_id:
                await self._send_diagnostic_report(
                    bot, user_id, domain_name, results, analysis
                )
            
            logger.info(f"‚úÖ Cache diagnostics completed for {domain_name}")
            return {
                "domain_name": domain_name,
                "results": results,
                "analysis": analysis
            }
            
        except Exception as e:
            logger.error(f"Error in cache diagnostics for {domain_name}: {e}", exc_info=True)
            if bot and user_id:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è {domain_name}: {str(e)}",
                    parse_mode="HTML"
                )
            raise
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if domain_id in self.active_diagnostics:
                del self.active_diagnostics[domain_id]
    
    def _analyze_results(self, results: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if not results or len(results) < 2:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è (–ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç, –∫—ç—à –≥–æ—Ä—è—á–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞)
        base_time = results[0]["avg_time"]
        
        # –ò—â–µ–º —Ç–æ—á–∫—É, –≥–¥–µ –≤—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
        cooldown_threshold = 1.3  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 30% —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç—ã–≤–∞–Ω–∏–µ–º
        cooldown_point = None
        
        for result in results[1:]:
            ratio = result["avg_time"] / base_time
            if ratio >= cooldown_threshold:
                cooldown_point = result["interval_minutes"]
                break
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥—Ä–µ–≤–∞
        if cooldown_point:
            recommended_interval = max(5, cooldown_point - 5)  # –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ –æ—Å—Ç—ã–≤–∞–Ω–∏—è
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–∫—É –æ—Å—Ç—ã–≤–∞–Ω–∏—è, –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            recommended_interval = results[-1]["interval_minutes"]
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        time_increases = []
        for i in range(1, len(results)):
            increase = ((results[i]["avg_time"] - base_time) / base_time) * 100
            time_increases.append({
                "interval": results[i]["interval_minutes"],
                "increase_percent": increase
            })
        
        return {
            "base_time": base_time,
            "cooldown_point": cooldown_point,
            "recommended_interval_minutes": recommended_interval,
            "time_increases": time_increases,
            "max_time": max(r["avg_time"] for r in results),
            "conclusion": self._generate_conclusion(
                base_time, cooldown_point, recommended_interval
            )
        }
    
    def _generate_conclusion(
        self,
        base_time: float,
        cooldown_point: Optional[int],
        recommended_interval: int
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        if cooldown_point:
            return (
                f"–ö—ç—à –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å—Ç—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ ~{cooldown_point} –º–∏–Ω—É—Ç. "
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ {recommended_interval} –º–∏–Ω—É—Ç."
            )
        else:
            return (
                f"–ö—ç—à –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º. "
                f"–ú–æ–∂–Ω–æ –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ {recommended_interval}+ –º–∏–Ω—É—Ç."
            )
    
    async def _send_diagnostic_report(
        self,
        bot,
        user_id: int,
        domain_name: str,
        results: List[Dict],
        analysis: Dict
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
        timeline = []
        for r in results:
            interval = r["interval_minutes"]
            avg_time = r["avg_time"]
            bars = "‚ñà" * int(avg_time * 10)  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            timeline.append(f"T+{interval:2d}m: {avg_time:.3f}s {bars}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üî¨ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n\n"
            f"üìä <b>–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:</b>\n"
            f"<code>{'  '.join(timeline)}</code>\n\n"
        )
        
        if "error" not in analysis:
            message += (
                f"üìà <b>–ê–Ω–∞–ª–∏–∑:</b>\n"
                f"‚Ä¢ –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è: <b>{analysis['base_time']:.3f}s</b>\n"
            )
            
            if analysis['cooldown_point']:
                message += (
                    f"‚Ä¢ üî• –ö—ç—à –æ—Å—Ç—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑: <b>~{analysis['cooldown_point']} –º–∏–Ω—É—Ç</b>\n"
                )
            else:
                message += f"‚Ä¢ ‚úÖ –ö—ç—à —Å—Ç–∞–±–∏–ª–µ–Ω –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö\n"
            
            message += (
                f"‚Ä¢ ‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{analysis['recommended_interval_minutes']} –º–∏–Ω—É—Ç</b>\n\n"
                f"üí° <b>–í—ã–≤–æ–¥:</b>\n"
                f"{analysis['conclusion']}"
            )
        else:
            message += f"‚ö†Ô∏è {analysis['error']}"
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending diagnostic report: {e}")
    
    async def start_diagnostic(
        self,
        domain_id: int,
        domain_name: str,
        urls: List[str],
        user_id: int,
        bot,
        test_intervals: Optional[List[int]] = None
    ) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
        Args:
            test_intervals: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä [0, 5, 10, 15, 20, 30]
        """
        if domain_id in self.active_diagnostics:
            logger.warning(f"Diagnostic already running for domain {domain_id}")
            return False
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å—Ä–∞–∑—É, —á–µ—Ä–µ–∑ 5, 10, 15, 20, 30 –º–∏–Ω—É—Ç
        if test_intervals is None:
            test_intervals = [0, 5, 10, 15, 20, 30]
        
        task = asyncio.create_task(
            self.run_diagnostic_test(
                domain_id=domain_id,
                domain_name=domain_name,
                urls=urls,
                test_intervals=test_intervals,
                sample_size=10,
                bot=bot,
                user_id=user_id
            )
        )
        
        self.active_diagnostics[domain_id] = task
        logger.info(f"üöÄ Started cache diagnostic for {domain_name}")
        return True
    
    def is_diagnostic_running(self, domain_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        if domain_id in self.active_diagnostics:
            task = self.active_diagnostics[domain_id]
            return not task.done()
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
cache_diagnostics = CacheDiagnostics()

