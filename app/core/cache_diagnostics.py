"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç—ã–≤–∞–Ω–∏—è –∫—ç—à–∞ —Å –º–µ—Ç–æ–¥–æ–º "–ª–µ—Å—Ç–Ω–∏—Ü—ã"
"""
import asyncio
import logging
import random
import statistics
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

import httpx

from app.core.db import db_manager

logger = logging.getLogger(__name__)


class CacheDiagnostics:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –º–µ—Ç–æ–¥–æ–º "–ª–µ—Å—Ç–Ω–∏—Ü—ã"
    
    –ú–µ—Ç–æ–¥:
    1. –ë–µ—Ä–µ–º 15 —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã)
    2. –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    3. "–õ–µ—Å—Ç–Ω–∏—Ü–∞" 15 –º–∏–Ω—É—Ç: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    4. –ö—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç—ã–≤–∞–Ω–∏—è: –≤—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –≤ 2-3 —Ä–∞–∑–∞
    5. –î–≤–∞ –æ–∫–Ω–∞: –¥–µ–Ω—å –∏ –Ω–æ—á—å
    6. –í—ã–≤–æ–¥: –º–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Å—Ç—ã–≤–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–Ω—è/–Ω–æ—á–∏
    """
    
    def __init__(self):
        self.active_diagnostics: Dict[int, asyncio.Task] = {}  # domain_id -> Task
    
    async def measure_response_time(
        self,
        url: str,
        repeat: int = 1,
        timeout: int = 30
    ) -> Optional[float]:
        """
        –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ URL
        
        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            repeat: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        times = []
        
        try:
            async with httpx.AsyncClient(
                headers={
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                },
                timeout=timeout,
                follow_redirects=True
            ) as client:
                for _ in range(repeat):
                    start_time = datetime.utcnow()
                    response = await client.get(url)
                    elapsed = (datetime.utcnow() - start_time).total_seconds()
                    
                    if response.status_code == 200:
                        times.append(elapsed)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                    if repeat > 1:
                        await asyncio.sleep(0.3)
            
            if times:
                return statistics.mean(times)
            return None
            
        except Exception as e:
            logger.debug(f"Error measuring {url}: {e}")
            return None
    
    async def fast_warmup(
        self,
        pages: List[str],
        bot=None,
        user_id: Optional[int] = None
    ) -> Dict[str, float]:
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            pages: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
            bot: –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: base_time}
        """
        logger.info(f"üî• Fast warmup of {len(pages)} pages...")
        
        if bot and user_id:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    f"üî• <b>–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤</b>\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ–≤–∞—é {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."
                ),
                parse_mode="HTML"
            )
        
        base_times = {}
        
        for i, url in enumerate(pages, 1):
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞
            time = await self.measure_response_time(url, repeat=3)
            if time:
                base_times[url] = time
                logger.info(f"  [{i}/{len(pages)}] {url}: {time:.3f}s")
            else:
                logger.warning(f"  [{i}/{len(pages)}] {url}: failed")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.5)
        
        logger.info(f"‚úÖ Fast warmup completed: {len(base_times)}/{len(pages)} pages warmed")
        return base_times
    
    async def ladder_test(
        self,
        pages: List[str],
        base_times: Dict[str, float],
        time_window: str = "day",
        bot=None,
        user_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–º "–ª–µ—Å—Ç–Ω–∏—Ü—ã" - 15 –º–∏–Ω—É—Ç, –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        
        Args:
            pages: –°–ø–∏—Å–æ–∫ –∏–∑ 15 —Å—Ç—Ä–∞–Ω–∏—Ü
            base_times: –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ {url: time}
            time_window: "day" –∏–ª–∏ "night"
            bot: –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        """
        window_emoji = "‚òÄÔ∏è" if time_window == "day" else "üåô"
        logger.info(f"{window_emoji} Starting ladder test ({time_window})...")
        
        if bot and user_id:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    f"{window_emoji} <b>–¢–µ—Å—Ç –ª–µ—Å—Ç–Ω–∏—Ü–µ–π ({time_window})</b>\n\n"
                    f"–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞...\n"
                    f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç ~15 –º–∏–Ω—É—Ç"
                ),
                parse_mode="HTML"
            )
        
        results = {}
        cooldown_threshold = 2.0  # –û—Å—Ç—ã–≤–∞–Ω–∏–µ = –≤—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –≤ 2+ —Ä–∞–∑–∞
        
        for minute, url in enumerate(pages, 1):
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã (–ø–µ—Ä–≤–∞—è - —Å—Ä–∞–∑—É)
            if minute > 1:
                logger.info(f"‚è∞ Waiting for minute {minute}...")
                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_time = await self.measure_response_time(url, repeat=1)
            
            if url not in base_times or not current_time:
                logger.warning(f"  [Minute {minute}] {url}: no data")
                continue
            
            base_time = base_times[url]
            ratio = current_time / base_time
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if ratio >= cooldown_threshold:
                status = "‚ùÑÔ∏è –û–°–¢–´–õ–û"
                cooldown_minute = minute
            elif ratio >= 1.5:
                status = "üü° –¢–µ–ø–ª–µ–µ—Ç"
                cooldown_minute = None
            else:
                status = "üî• –ì–æ—Ä—è—á–æ"
                cooldown_minute = None
            
            results[url] = {
                "minute": minute,
                "base_time": base_time,
                "current_time": current_time,
                "ratio": ratio,
                "status": status,
                "cooldown_minute": cooldown_minute
            }
            
            logger.info(
                f"  [Minute {minute:2d}] {url[:50]}... "
                f"base={base_time:.3f}s current={current_time:.3f}s "
                f"ratio={ratio:.2f}x {status}"
            )
        
        logger.info(f"‚úÖ Ladder test ({time_window}) completed")
        return results
    
    def analyze_results(
        self,
        day_results: Dict[str, Any],
        night_results: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        
        Args:
            day_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            night_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ê–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        def analyze_window(results: Dict[str, Any], window_name: str) -> Dict:
            cooldown_minutes = [
                r["cooldown_minute"] 
                for r in results.values() 
                if r.get("cooldown_minute")
            ]
            
            if cooldown_minutes:
                median_cooldown = statistics.median(cooldown_minutes)
                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —á—É—Ç—å —á–∞—â–µ –º–µ–¥–∏–∞–Ω—ã
                recommended_interval = max(5, int(median_cooldown) - 2)
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç—ã–ª–æ –∑–∞ 15 –º–∏–Ω—É—Ç
                median_cooldown = 15
                recommended_interval = 12
            
            return {
                "window": window_name,
                "cooldown_pages": len(cooldown_minutes),
                "total_pages": len(results),
                "median_cooldown_minute": median_cooldown,
                "recommended_interval": recommended_interval,
                "cooldown_minutes": cooldown_minutes
            }
        
        analysis = {
            "day": analyze_window(day_results, "–¥–µ–Ω—å")
        }
        
        if night_results:
            analysis["night"] = analyze_window(night_results, "–Ω–æ—á—å")
        
        return analysis
    
    async def run_diagnostic_test(
        self,
        domain_id: int,
        domain_name: str,
        urls: List[str],
        test_mode: str = "day",  # "day", "night", –∏–ª–∏ "both"
        bot=None,
        user_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        Args:
            domain_id: ID –¥–æ–º–µ–Ω–∞
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
            urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_mode: "day" (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å), "night" (—Ç–æ–ª—å–∫–æ –Ω–æ—á—å), "both" (–æ–±–∞)
            bot: –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"üî¨ Starting advanced cache diagnostics for {domain_name} (mode: {test_mode})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            if bot and user_id:
                mode_text = {
                    "day": "‚òÄÔ∏è –¥–Ω–µ–≤–Ω–æ–π —Ç–µ—Å—Ç",
                    "night": "üåô –Ω–æ—á–Ω–æ–π —Ç–µ—Å—Ç",
                    "both": "‚òÄÔ∏è –¥–Ω–µ–≤–Ω–æ–π + üåô –Ω–æ—á–Ω–æ–π —Ç–µ—Å—Ç—ã"
                }
                
                duration = 15 if test_mode in ["day", "night"] else 30
                
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"üî¨ <b>–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</b>\n\n"
                        f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                        f"üìä –†–µ–∂–∏–º: {mode_text[test_mode]}\n"
                        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: <b>15</b>\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>~{duration} –º–∏–Ω—É—Ç</b>\n\n"
                        f"–ú–µ—Ç–æ–¥: –õ–µ—Å—Ç–Ω–∏—Ü–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)"
                    ),
                    parse_mode="HTML"
                )
            
            # –í—ã–±–∏—Ä–∞–µ–º 15 —Å—Ç—Ä–∞–Ω–∏—Ü (—Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞)
            sample_size = min(15, len(urls))
            pages = random.sample(urls, sample_size)
            
            logger.info(f"Selected {len(pages)} pages for testing")
            
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤
            base_times = await self.fast_warmup(pages, bot, user_id)
            
            if len(base_times) < 5:
                raise Exception(f"Too few pages warmed successfully: {len(base_times)}/15")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pages = [p for p in pages if p in base_times]
            
            # –®–∞–≥ 2: –¢–µ—Å—Ç—ã –ª–µ—Å—Ç–Ω–∏—Ü–µ–π
            day_results = None
            night_results = None
            
            if test_mode in ["day", "both"]:
                day_results = await self.ladder_test(pages, base_times, "day", bot, user_id)
            
            if test_mode in ["night", "both"]:
                if test_mode == "both":
                    # –ú–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
                    if bot and user_id:
                        await bot.send_message(
                            chat_id=user_id,
                            text="‚úÖ –î–Ω–µ–≤–Ω–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n‚è∏ –ü–∞—É–∑–∞ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –Ω–æ—á–Ω—ã–º —Ç–µ—Å—Ç–æ–º...",
                            parse_mode="HTML"
                        )
                    await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã –ø–∞—É–∑—ã
                
                night_results = await self.ladder_test(pages, base_times, "night", bot, user_id)
            
            # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑
            analysis = self.analyze_results(day_results, night_results)
            
            # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if bot and user_id:
                await self._send_diagnostic_report(
                    bot, user_id, domain_name, pages, base_times,
                    day_results, night_results, analysis
                )
            
            logger.info(f"‚úÖ Cache diagnostics completed for {domain_name}")
            
            return {
                "domain_name": domain_name,
                "pages": pages,
                "base_times": base_times,
                "day_results": day_results,
                "night_results": night_results,
                "analysis": analysis
            }
            
        except Exception as e:
            logger.error(f"Error in cache diagnostics for {domain_name}: {e}", exc_info=True)
            if bot and user_id:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è {domain_name}: {str(e)}",
                    parse_mode="HTML"
                )
            raise
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if domain_id in self.active_diagnostics:
                del self.active_diagnostics[domain_id]
    
    async def _send_diagnostic_report(
        self,
        bot,
        user_id: int,
        domain_name: str,
        pages: List[str],
        base_times: Dict[str, float],
        day_results: Optional[Dict[str, Any]],
        night_results: Optional[Dict[str, Any]],
        analysis: Dict[str, Any]
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ"""
        
        def format_results_table(results: Dict[str, Any]) -> str:
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
            lines = []
            for url, data in results.items():
                minute = data["minute"]
                status_icon = "üî•" if data["ratio"] < 1.5 else "üü°" if data["ratio"] < 2.0 else "‚ùÑÔ∏è"
                short_url = url.split('/')[-1][:20] if '/' in url else url[:20]
                lines.append(f"M{minute:2d}‚îÇ {status_icon} {data['current_time']:.2f}s ‚îÇ {short_url}...")
            return "\n".join(lines)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üî¨ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
            f"üìÑ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: <b>{len(pages)}</b> —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
        )
        
        # –î–Ω–µ–≤–Ω–æ–π —Ç–µ—Å—Ç
        if day_results:
            day_analysis = analysis["day"]
            message += (
                f"‚òÄÔ∏è <b>–î–Ω–µ–≤–Ω–æ–π —Ç–µ—Å—Ç:</b>\n"
                f"‚Ä¢ –û—Å—Ç—ã–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{day_analysis['cooldown_pages']}/{day_analysis['total_pages']}</b>\n"
                f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Å—Ç—ã–≤–∞–Ω–∏–µ: <b>~{day_analysis['median_cooldown_minute']:.0f} –º–∏–Ω—É—Ç</b>\n"
                f"‚Ä¢ ‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{day_analysis['recommended_interval']} –º–∏–Ω—É—Ç</b>\n\n"
            )
        
        # –ù–æ—á–Ω–æ–π —Ç–µ—Å—Ç
        if night_results:
            night_analysis = analysis["night"]
            message += (
                f"üåô <b>–ù–æ—á–Ω–æ–π —Ç–µ—Å—Ç:</b>\n"
                f"‚Ä¢ –û—Å—Ç—ã–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{night_analysis['cooldown_pages']}/{night_analysis['total_pages']}</b>\n"
                f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Å—Ç—ã–≤–∞–Ω–∏–µ: <b>~{night_analysis['median_cooldown_minute']:.0f} –º–∏–Ω—É—Ç</b>\n"
                f"‚Ä¢ ‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{night_analysis['recommended_interval']} –º–∏–Ω—É—Ç</b>\n\n"
            )
        
        # –í—ã–≤–æ–¥
        message += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        
        if day_results and night_results:
            day_int = analysis["day"]["recommended_interval"]
            night_int = analysis["night"]["recommended_interval"]
            message += (
                f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
                f"‚Ä¢ ‚òÄÔ∏è –î–µ–Ω—å (10:00-22:00): –∫–∞–∂–¥—ã–µ <b>{day_int} –º–∏–Ω—É—Ç</b>\n"
                f"‚Ä¢ üåô –ù–æ—á—å (22:00-10:00): –∫–∞–∂–¥—ã–µ <b>{night_int} –º–∏–Ω—É—Ç</b>\n\n"
                f"–≠—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç —Ä–µ—Å—É—Ä—Å—ã!"
            )
        elif day_results:
            interval = analysis["day"]["recommended_interval"]
            message += f"–ü—Ä–æ–≥—Ä–µ–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–µ <b>{interval} –º–∏–Ω—É—Ç</b>"
        elif night_results:
            interval = analysis["night"]["recommended_interval"]
            message += f"–ü—Ä–æ–≥—Ä–µ–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–µ <b>{interval} –º–∏–Ω—É—Ç</b>"
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error sending diagnostic report: {e}")
    
    async def start_diagnostic(
        self,
        domain_id: int,
        domain_name: str,
        urls: List[str],
        user_id: int,
        bot,
        test_mode: str = "day"
    ) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
        Args:
            domain_id: ID –¥–æ–º–µ–Ω–∞
            domain_name: –ò–º—è –¥–æ–º–µ–Ω–∞
            urls: –°–ø–∏—Å–æ–∫ URL
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot: –ë–æ—Ç
            test_mode: "day", "night", –∏–ª–∏ "both"
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if domain_id in self.active_diagnostics:
            logger.warning(f"Diagnostic already running for domain {domain_id}")
            return False
        
        if len(urls) < 5:
            logger.warning(f"Too few URLs for diagnostics: {len(urls)}")
            return False
        
        task = asyncio.create_task(
            self.run_diagnostic_test(
                domain_id=domain_id,
                domain_name=domain_name,
                urls=urls,
                test_mode=test_mode,
                bot=bot,
                user_id=user_id
            )
        )
        
        self.active_diagnostics[domain_id] = task
        logger.info(f"üöÄ Started cache diagnostic for {domain_name} (mode: {test_mode})")
        return True
    
    def is_diagnostic_running(self, domain_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        if domain_id in self.active_diagnostics:
            task = self.active_diagnostics[domain_id]
            return not task.done()
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
cache_diagnostics = CacheDiagnostics()
