"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
"""
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

from app.core.db import db_manager
from app.models.domain import User, Domain, WarmingHistory

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤"""
    
    async def generate_admin_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = await db_manager.get_all_domains()
        
        if not domains:
            return (
                "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
                "–ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            )
        
        # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        
        total_domains = len(domains)
        total_urls = sum(len(domain.urls) for domain in domains)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–º
        total_warmings = 0
        total_requests = 0
        total_success = 0
        total_errors = 0
        avg_times = []
        
        for domain in domains:
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            total_warmings += len(history)
            for h in history:
                total_requests += h.total_requests
                total_success += h.successful_requests
                total_errors += h.failed_requests + h.timeout_requests
                avg_times.append(h.avg_response_time)
        
        overall_avg_time = sum(avg_times) / len(avg_times) if avg_times else 0
        success_rate = (total_success / total_requests * 100) if total_requests > 0 else 0
        
        report = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
            f"üåê <b>–î–æ–º–µ–Ω—ã:</b> {total_domains}\n"
            f"üìÑ <b>–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b> {total_urls}\n\n"
            f"üî• <b>–ü—Ä–æ–≥—Ä–µ–≤–æ–≤ –∑–∞ —Å—É—Ç–∫–∏:</b> {total_warmings}\n"
            f"üìä <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_requests}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {total_success} ({success_rate:.1f}%)\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {total_errors}\n\n"
            f"‚è± <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {overall_avg_time:.2f}—Å"
        )
        
        # –î–æ–º–µ–Ω—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        problem_domains = []
        for domain in domains:
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            if history:
                latest = history[-1] if history else None
                if latest and latest.avg_response_time > 3.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                    problem_domains.append((domain.name, latest.avg_response_time))
        
        if problem_domains:
            report += "\n\n‚ö†Ô∏è <b>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n"
            for name, avg_time in problem_domains[:5]:
                report += f"‚Ä¢ {name}: {avg_time:.2f}—Å\n"
        
        return report
    
    async def generate_client_report(self, client_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
        domains = await db_manager.get_domains_by_client(client_id)
        
        if not domains:
            return (
                "üìä <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ."
            )
        
        # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        
        total_urls = sum(len(domain.urls) for domain in domains)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
        domain_stats = []
        
        for domain in domains:
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            if history:
                avg_times = [h.avg_response_time for h in history]
                avg_time = sum(avg_times) / len(avg_times) if avg_times else 0
                
                total_reqs = sum(h.total_requests for h in history)
                total_success = sum(h.successful_requests for h in history)
                success_rate = (total_success / total_reqs * 100) if total_reqs > 0 else 0
                
                domain_stats.append({
                    'name': domain.name,
                    'urls': len(domain.urls),
                    'avg_time': avg_time,
                    'success_rate': success_rate,
                    'warmings': len(history)
                })
            else:
                domain_stats.append({
                    'name': domain.name,
                    'urls': len(domain.urls),
                    'avg_time': 0,
                    'success_rate': 0,
                    'warmings': 0
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üìä <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
            f"üåê <b>–î–æ–º–µ–Ω–æ–≤ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ:</b> {len(domains)}\n"
            f"üìÑ <b>–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b> {total_urls}\n\n"
        )
        
        for stat in domain_stats:
            status_emoji = "‚úÖ" if stat['avg_time'] < 2.0 else "‚ö†Ô∏è" if stat['avg_time'] < 4.0 else "‚ùå"
            
            report += (
                f"{status_emoji} <b>{stat['name']}</b>\n"
                f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {stat['urls']}\n"
                f"   ‚è± –°—Ä. –≤—Ä–µ–º—è: {stat['avg_time']:.2f}—Å\n"
                f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stat['success_rate']:.1f}%\n"
                f"   üî• –ü—Ä–æ–≥—Ä–µ–≤–æ–≤: {stat['warmings']}\n\n"
            )
        
        return report
    
    async def send_daily_reports(self, bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admins = await db_manager.get_all_admins()
            admin_report = await self.generate_admin_report()
            
            for admin in admins:
                try:
                    await bot.send_message(admin.id, admin_report, parse_mode="HTML")
                    logger.info(f"Sent daily report to admin {admin.id}")
                except Exception as e:
                    logger.error(f"Failed to send report to admin {admin.id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º
            clients = await db_manager.get_all_clients()
            
            for client in clients:
                try:
                    client_report = await self.generate_client_report(client.id)
                    await bot.send_message(client.id, client_report, parse_mode="HTML")
                    logger.info(f"Sent daily report to client {client.id}")
                except Exception as e:
                    logger.error(f"Failed to send report to client {client.id}: {e}")
            
            logger.info("Daily reports sent successfully")
            
        except Exception as e:
            logger.error(f"Error sending daily reports: {e}", exc_info=True)
    
    async def send_error_notification(self, bot, domain_name: str, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            admins = await db_manager.get_all_admins()
            
            message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}\n\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            for admin in admins:
                try:
                    await bot.send_message(admin.id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Failed to send error notification to admin {admin.id}: {e}")
            
        except Exception as e:
            logger.error(f"Error sending error notification: {e}", exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
report_generator = ReportGenerator()

