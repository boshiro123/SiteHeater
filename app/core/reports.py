"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
"""
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

from app.core.db import db_manager
from app.models.domain import User, Domain, WarmingHistory
from app.utils.url_grouper import url_grouper

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤"""
    
    async def generate_admin_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = await db_manager.get_all_domains()
        
        if not domains:
            return (
                "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
                "–ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            )
        
        # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
        active_jobs = await db_manager.get_active_jobs()
        job_map = {job.domain_id: job for job in active_jobs}
        
        total_domains = len(domains)
        total_urls = 0  # –†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º—ã–µ URL
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–º
        total_warmings = 0
        total_requests = 0
        total_success = 0
        total_errors = 0
        avg_times = []
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
        domain_stats = []
        
        for domain in domains:
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            # –ü–æ–ª—É—á–∞–µ–º Job –¥–ª—è –¥–æ–º–µ–Ω–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å active_url_group
            job = job_map.get(domain.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
            all_urls = [url.url for url in domain.urls]
            if job and job.active_url_group:
                # –§–∏–ª—å—Ç—Ä—É–µ–º URL –ø–æ –≥—Ä—É–ø–ø–µ
                warming_urls = url_grouper.filter_urls_by_group(all_urls, domain.name, job.active_url_group)
                url_count = len(warming_urls)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç Job - –∑–Ω–∞—á–∏—Ç –≤—Å–µ URL
                url_count = len(all_urls)
            
            total_urls += url_count
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É
            domain_warmings = len(history)
            domain_requests = 0
            domain_success = 0
            domain_errors = 0
            domain_avg_times = []
            
            for h in history:
                domain_requests += h.total_requests
                domain_success += h.successful_requests
                domain_errors += h.failed_requests + h.timeout_requests
                domain_avg_times.append(h.avg_response_time)
            
            domain_avg_time = sum(domain_avg_times) / len(domain_avg_times) if domain_avg_times else 0
            
            domain_stats.append({
                'name': domain.name,
                'url_count': url_count,
                'avg_time': domain_avg_time,
                'warmings': domain_warmings,
                'requests': domain_requests,
                'success': domain_success,
                'errors': domain_errors
            })
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_warmings += domain_warmings
            total_requests += domain_requests
            total_success += domain_success
            total_errors += domain_errors
            if domain_avg_times:
                avg_times.extend(domain_avg_times)
        
        overall_avg_time = sum(avg_times) / len(avg_times) if avg_times else 0
        success_rate = (total_success / total_requests * 100) if total_requests > 0 else 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –∑–∞ —Å—É—Ç–∫–∏
        total_minutes = 1440  # 24 —á–∞—Å–∞ = 1440 –º–∏–Ω—É—Ç
        avg_requests_per_minute = total_requests / total_minutes if total_requests > 0 else 0
        
        report = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
            f"üåê <b>–î–æ–º–µ–Ω—ã:</b> {total_domains}\n"
            f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–∞–±–æ—Ç–µ:</b> {total_urls}\n\n"
            f"üî• <b>–ü—Ä–æ–≥—Ä–µ–≤–æ–≤ –∑–∞ —Å—É—Ç–∫–∏:</b> {total_warmings}\n"
            f"üìä <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_requests}\n"
            f"‚ö°Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω:</b> {avg_requests_per_minute:.2f}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {total_success} ({success_rate:.1f}%)\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {total_errors}\n\n"
            f"‚è± <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {overall_avg_time:.2f}—Å\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
        if domain_stats:
            report += "üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º:</b>\n\n"
            for stat in domain_stats:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                if stat['avg_time'] == 0:
                    status = "üîµ"
                elif stat['avg_time'] < 2.0:
                    status = "‚úÖ"
                elif stat['avg_time'] < 4.0:
                    status = "‚ö†Ô∏è"
                else:
                    status = "‚ùå"
                
                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                report += (
                    f"{status} <b>{stat['name']}</b>\n"
                    f"   {stat['avg_time']:.2f}—Å ‚Ä¢ {stat['url_count']} —Å—Ç—Ä ‚Ä¢ "
                    f"{stat['warmings']} –ø—Ä–æ–≥—Ä ‚Ä¢ {stat['requests']} –∑–∞–ø—Ä ‚Ä¢ "
                    f"‚úÖ{stat['success']} ‚Ä¢ ‚ùå{stat['errors']}\n\n"
                )
        
        return report
    
    async def generate_client_report(self, client_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
        domains = await db_manager.get_domains_by_client(client_id)
        
        if not domains:
            return (
                "üìä <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ."
            )
        
        # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
        active_jobs = await db_manager.get_active_jobs()
        job_map = {job.domain_id: job for job in active_jobs}
        
        total_urls = 0  # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º—ã–µ URL
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
        domain_stats = []
        
        for domain in domains:
            # –ü–æ–ª—É—á–∞–µ–º Job –¥–ª—è –¥–æ–º–µ–Ω–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å active_url_group
            job = job_map.get(domain.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
            all_urls = [url.url for url in domain.urls]
            if job and job.active_url_group:
                # –§–∏–ª—å—Ç—Ä—É–µ–º URL –ø–æ –≥—Ä—É–ø–ø–µ
                warming_urls = url_grouper.filter_urls_by_group(all_urls, domain.name, job.active_url_group)
                url_count = len(warming_urls)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç Job - –∑–Ω–∞—á–∏—Ç –≤—Å–µ URL
                url_count = len(all_urls)
            
            total_urls += url_count
            
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            if history:
                avg_times = [h.avg_response_time for h in history]
                avg_time = sum(avg_times) / len(avg_times) if avg_times else 0
                
                total_reqs = sum(h.total_requests for h in history)
                total_success = sum(h.successful_requests for h in history)
                success_rate = (total_success / total_reqs * 100) if total_reqs > 0 else 0
                
                domain_stats.append({
                    'name': domain.name,
                    'urls': url_count,  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
                    'avg_time': avg_time,
                    'success_rate': success_rate,
                    'checks': len(history)
                })
            else:
                domain_stats.append({
                    'name': domain.name,
                    'urls': url_count,  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
                    'avg_time': 0,
                    'success_rate': 0,
                    'checks': 0
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ø—Ä–æ–≥—Ä–µ–≤–∞")
        report = (
            f"üìä <b>–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–∏–º —Å–∞–π—Ç–∞–º</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
            f"üåê <b>–î–æ–º–µ–Ω–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:</b> {len(domains)}\n"
            f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–∞–±–æ—Ç–µ:</b> {total_urls}\n\n"
        )
        
        for stat in domain_stats:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if stat['avg_time'] == 0:
                status_emoji = "üîµ"
                status_text = "–ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É"
            elif stat['avg_time'] < 2.0:
                status_emoji = "‚úÖ"
                status_text = "–û—Ç–ª–∏—á–Ω–æ"
            elif stat['avg_time'] < 4.0:
                status_emoji = "‚ö†Ô∏è"
                status_text = "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
            else:
                status_emoji = "‚ùå"
                status_text = "–ú–µ–¥–ª–µ–Ω–Ω–æ"
            
            report += (
                f"{status_emoji} <b>{stat['name']}</b>\n"
                f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–∞–±–æ—Ç–µ: {stat['urls']}\n"
                f"   ‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {stat['avg_time']:.2f}—Å\n"
                f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {stat['success_rate']:.1f}%\n\n"
            )
        
        report += "\nüí° <i>–í–∞—à–∏ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ</i>"
        
        return report
    
    async def send_daily_reports(self, bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admins = await db_manager.get_all_admins()
            admin_report = await self.generate_admin_report()
            
            for admin in admins:
                try:
                    await bot.send_message(admin.id, admin_report, parse_mode="HTML")
                    logger.info(f"Sent daily report to admin {admin.id}")
                except Exception as e:
                    logger.error(f"Failed to send report to admin {admin.id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º
            clients = await db_manager.get_all_clients()
            
            for client in clients:
                try:
                    client_report = await self.generate_client_report(client.id)
                    await bot.send_message(client.id, client_report, parse_mode="HTML")
                    logger.info(f"Sent daily report to client {client.id}")
                except Exception as e:
                    logger.error(f"Failed to send report to client {client.id}: {e}")
            
            logger.info("Daily reports sent successfully")
            
        except Exception as e:
            logger.error(f"Error sending daily reports: {e}", exc_info=True)
    
    async def send_error_notification(self, bot, domain_name: str, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            admins = await db_manager.get_all_admins()
            
            message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain_name}</b>\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}\n\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            for admin in admins:
                try:
                    await bot.send_message(admin.id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Failed to send error notification to admin {admin.id}: {e}")
            
        except Exception as e:
            logger.error(f"Error sending error notification: {e}", exc_info=True)
    
    async def generate_hourly_admin_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2-—á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(hours=2)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = await db_manager.get_all_domains()
        
        if not domains:
            return (
                "üìä <b>2-—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç</b>\n"
                f"üïê {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n\n"
                "–ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            )
        
        total_requests = 0
        total_warmings = 0
        total_success = 0
        total_errors = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
        domain_stats = []
        
        for domain in domains:
            history = await db_manager.get_warming_history_by_period(
                domain.id, start_time, end_time
            )
            
            if history:
                domain_warmings = len(history)
                domain_requests = sum(h.total_requests for h in history)
                domain_success = sum(h.successful_requests for h in history)
                domain_errors = sum(h.failed_requests + h.timeout_requests for h in history)
                
                total_warmings += domain_warmings
                total_requests += domain_requests
                total_success += domain_success
                total_errors += domain_errors
                
                domain_stats.append({
                    'name': domain.name,
                    'warmings': domain_warmings,
                    'requests': domain_requests,
                    'success': domain_success,
                    'errors': domain_errors
                })
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        total_minutes = 120  # 2 —á–∞—Å–∞ = 120 –º–∏–Ω—É—Ç
        avg_requests_per_minute = total_requests / total_minutes if total_requests > 0 else 0
        success_rate = (total_success / total_requests * 100) if total_requests > 0 else 0
        
        report = (
            f"üìä <b>2-—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç</b>\n"
            f"üïê {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n\n"
            f"üî• <b>–ü—Ä–æ–≥—Ä–µ–≤–æ–≤:</b> {total_warmings}\n"
            f"üìä <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_requests}\n"
            f"‚ö°Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω:</b> {avg_requests_per_minute:.2f}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {total_success} ({success_rate:.1f}%)\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {total_errors}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–æ–º–µ–Ω–∞–º, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤—ã
        if domain_stats:
            report += "\nüìã <b>–î–µ—Ç–∞–ª–∏:</b>\n"
            for stat in domain_stats:
                report += (
                    f"‚Ä¢ <b>{stat['name']}</b>: "
                    f"{stat['warmings']} –ø—Ä–æ–≥—Ä, "
                    f"{stat['requests']} –∑–∞–ø—Ä, "
                    f"‚úÖ{stat['success']} ‚ùå{stat['errors']}\n"
                )
        
        return report
    
    async def send_hourly_admin_reports(self, bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 2-—á–∞—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            admins = await db_manager.get_all_admins()
            report = await self.generate_hourly_admin_report()
            
            for admin in admins:
                try:
                    await bot.send_message(admin.id, report, parse_mode="HTML")
                    logger.info(f"Sent 2-hour report to admin {admin.id}")
                except Exception as e:
                    logger.error(f"Failed to send 2-hour report to admin {admin.id}: {e}")
            
            logger.info("2-hour admin reports sent successfully")
            
        except Exception as e:
            logger.error(f"Error sending 2-hour admin reports: {e}", exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
report_generator = ReportGenerator()

