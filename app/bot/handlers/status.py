"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.core.warming_manager import warming_manager
from app.core.db import db_manager

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã
    active_count = warming_manager.get_active_count()
    
    status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    
    # 1. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã (–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
    if active_count > 0:
        status_text += f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤: {active_count}</b>\n"
        
        for domain_id, info in warming_manager.task_info.items():
            if warming_manager.is_warming(domain_id):
                elapsed = (datetime.utcnow() - info["start_time"]).total_seconds()
                elapsed_str = f"{int(elapsed // 60)}–º {int(elapsed % 60)}—Å"
                
                status_text += (
                    f"\nüåê <b>{info['domain_name']}</b>\n"
                    f"  üìä –°—Ç—Ä–∞–Ω–∏—Ü: {info['urls_count']}\n"
                    f"  ‚è± –í—Ä–µ–º—è: {elapsed_str}\n"
                )
    else:
        status_text += "üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤\n"
    
    # 2. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ–≤)
    status_text += "\n‚è∞ <b>–ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ–≤:</b>\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    domains = await db_manager.get_all_domains()
    scheduled_count = 0
    
    for domain in domains:
        active_jobs = [job for job in domain.jobs if job.active]
        if active_jobs:
            scheduled_count += 1
            job = active_jobs[0]
            
            last_run_text = ""
            if job.last_run:
                time_since = (datetime.utcnow() - job.last_run).total_seconds()
                if time_since < 3600:
                    last_run_text = f" (–ø—Ä–æ–≥—Ä–µ–≤ {int(time_since / 60)}–º –Ω–∞–∑–∞–¥)"
                elif time_since < 86400:
                    last_run_text = f" (–ø—Ä–æ–≥—Ä–µ–≤ {int(time_since / 3600)}—á –Ω–∞–∑–∞–¥)"
            
            status_text += f"‚Ä¢ {domain.name} - –∫–∞–∂–¥—ã–µ {job.schedule}{last_run_text}\n"
    
    if scheduled_count == 0:
        status_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
    else:
        status_text += f"\n<i>–í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ –≤ –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ–≤–µ: {scheduled_count}</i>"
    
    await message.answer(status_text, parse_mode="HTML")

