"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.core.warming_manager import warming_manager

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã"""
    active_count = warming_manager.get_active_count()
    
    if active_count == 0:
        await message.answer(
            "üí§ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domains –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞.",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
    status_lines = [f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤: {active_count}</b>\n"]
    
    for domain_id, info in warming_manager.task_info.items():
        if warming_manager.is_warming(domain_id):
            elapsed = (datetime.utcnow() - info["start_time"]).total_seconds()
            elapsed_str = f"{int(elapsed // 60)}–º {int(elapsed % 60)}—Å"
            
            status_lines.append(
                f"\nüåê <b>{info['domain_name']}</b>\n"
                f"  üìä –°—Ç—Ä–∞–Ω–∏—Ü: {info['urls_count']}\n"
                f"  ‚è± –í—Ä–µ–º—è: {elapsed_str}"
            )
    
    await message.answer(
        "\n".join(status_lines),
        parse_mode="HTML"
    )

