"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.db import db_manager
from app.bot.keyboards.inline import get_clients_keyboard, get_client_actions_keyboard, get_back_keyboard
from app.bot.middlewares.role_check import AdminOnlyMiddleware

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º middleware —Ç–æ–ª—å–∫–æ –∫ —ç—Ç–æ–º—É —Ä–æ—É—Ç–µ—Ä—É
router.message.middleware(AdminOnlyMiddleware())
router.callback_query.middleware(AdminOnlyMiddleware())


class AddClientStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    waiting_for_identifier = State()


@router.message(Command("clients"))
async def cmd_clients(message: Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = await db_manager.get_all_clients()
    
    if not clients:
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_client –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã ({len(clients)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_clients_keyboard(clients)
    )


@router.callback_query(F.data.startswith("client_") & ~F.data.startswith("client_domains_"))
async def callback_client_details(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    user = await db_manager.register_user(client_id, None, None, None)
    
    if not user:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    domains = await db_manager.get_domains_by_client(client_id)
    
    domains_text = ""
    if domains:
        domains_text = "\n\nüìã <b>–î–æ–º–µ–Ω—ã:</b>\n"
        for domain in domains:
            domains_text += f"‚Ä¢ {domain.name} ({len(domain.urls)} —Å—Ç—Ä–∞–Ω–∏—Ü)\n"
    else:
        domains_text = "\n\nüìã <b>–î–æ–º–µ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    
    await callback.message.edit_text(
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%Y-%m-%d %H:%M')}"
        f"{domains_text}",
        parse_mode="HTML",
        reply_markup=get_client_actions_keyboard(client_id)
    )


@router.callback_query(F.data.startswith("client_domains_"))
async def callback_client_domains(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    domains = await db_manager.get_domains_by_client(client_id)
    
    if not domains:
        await callback.message.edit_text(
            "üìã <b>–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    domains_text = "üìã <b>–î–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
    for domain in domains:
        status = "üü¢" if domain.is_active else "üî¥"
        domains_text += f"{status} <b>{domain.name}</b>\n"
        domains_text += f"   üìä –°—Ç—Ä–∞–Ω–∏—Ü: {len(domain.urls)}\n"
        domains_text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {domain.created_at.strftime('%Y-%m-%d')}\n\n"
    
    await callback.message.edit_text(
        domains_text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@router.callback_query(F.data == "back")
async def callback_back(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    await callback.answer()
    await callback.message.delete()


@router.callback_query(F.data == "back_to_clients")
async def callback_back_to_clients(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    clients = await db_manager.get_all_clients()
    
    await callback.message.edit_text(
        f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã ({len(clients)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_clients_keyboard(clients)
    )


@router.message(Command("add_client"))
async def cmd_add_client(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä @username) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
        parse_mode="HTML"
    )
    await state.set_state(AddClientStates.waiting_for_identifier)


@router.message(AddClientStates.waiting_for_identifier)
async def process_client_identifier(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    identifier = message.text.strip()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_manager.get_user_by_username_or_phone(identifier)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n"
            "2. Username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        return
    
    if user.role == "admin":
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
    if user.role != "client":
        user = await db_manager.set_user_role(user.id, "client")
    
    await message.answer(
        f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî ID: <code>{user.id}</code>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–µ–º—É –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ /add",
        parse_mode="HTML"
    )
    
    await state.clear()


@router.callback_query(F.data.startswith("assign_domain_"))
async def callback_assign_domain(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–º–µ–Ω–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    all_domains = await db_manager.get_domains()
    
    if not all_domains:
        await callback.message.edit_text(
            "üìã <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ /add",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    client_domains = await db_manager.get_domains_by_client(client_id)
    client_domain_ids = [d.id for d in client_domains]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–º–µ–Ω—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    available_domains = [d for d in all_domains if d.id not in client_domain_ids]
    
    if not available_domains:
        await callback.message.edit_text(
            "üìã <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏</b>\n\n"
            "–í—Å–µ –¥–æ–º–µ–Ω—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for domain in available_domains:
        builder.row(
            InlineKeyboardButton(
                text=f"üåê {domain.name} ({len(domain.urls)} URL)",
                callback_data=f"link_domain_{client_id}_{domain.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")
    )
    
    await callback.message.edit_text(
        "üîó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("link_domain_"))
async def callback_link_domain(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É"""
    await callback.answer()
    
    parts = callback.data.split("_")
    client_id = int(parts[2])
    domain_id = int(parts[3])
    
    try:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É
        domain = await db_manager.assign_domain_to_client(domain_id, client_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        user = await db_manager.register_user(client_id, None, None, None)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ–º–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: @{user.username or user.phone or f'ID:{user.id}'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –¥–æ–º–µ–Ω–æ–º –∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"Domain {domain.name} (ID:{domain_id}) assigned to client {client_id}")
        
    except Exception as e:
        logger.error(f"Error linking domain {domain_id} to client {client_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –¥–æ–º–µ–Ω–∞:\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
__all__ = ['router']

