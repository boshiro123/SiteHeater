"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.db import db_manager
from app.bot.keyboards.inline import get_clients_keyboard, get_client_actions_keyboard, get_back_keyboard
from app.bot.middlewares.role_check import AdminOnlyMiddleware

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º middleware —Ç–æ–ª—å–∫–æ –∫ —ç—Ç–æ–º—É —Ä–æ—É—Ç–µ—Ä—É
router.message.middleware(AdminOnlyMiddleware())
router.callback_query.middleware(AdminOnlyMiddleware())


class AddClientStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    waiting_for_identifier = State()


class RestoreBackupStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    waiting_for_backup_selection = State()
    waiting_for_confirmation = State()


@router.message(Command("clients"))
async def cmd_clients(message: Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = await db_manager.get_all_clients()
    
    if not clients:
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_client –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã ({len(clients)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_clients_keyboard(clients)
    )


@router.callback_query(F.data.startswith("client_") & ~F.data.startswith("client_domains_"))
async def callback_client_details(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    user = await db_manager.get_user_by_id(client_id)
    
    if not user:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    domains = await db_manager.get_domains_by_client(client_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    display_name = ""
    if user.first_name:
        display_name = user.first_name
        if user.last_name:
            display_name += f" {user.last_name}"
    elif user.username:
        display_name = f"@{user.username}"
    else:
        display_name = f"ID: {user.id}"
    
    domains_text = ""
    if domains:
        domains_text = "\n\nüìã <b>–î–æ–º–µ–Ω—ã:</b>\n"
        for domain in domains:
            domains_text += f"‚Ä¢ {domain.name} ({len(domain.urls)} —Å—Ç—Ä–∞–Ω–∏—Ü)\n"
    else:
        domains_text = "\n\nüìã <b>–î–æ–º–µ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º username —Å—Ç—Ä–æ–∫—É
    username_str = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    await callback.message.edit_text(
        f"üë§ <b>{display_name}</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ Username: {username_str}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%Y-%m-%d %H:%M')}"
        f"{domains_text}",
        parse_mode="HTML",
        reply_markup=get_client_actions_keyboard(client_id)
    )


@router.callback_query(F.data.startswith("client_domains_"))
async def callback_client_domains(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    domains = await db_manager.get_domains_by_client(client_id)
    
    if not domains:
        await callback.message.edit_text(
            "üìã <b>–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–º–µ–Ω–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for domain in domains:
        status = "üü¢" if domain.is_active else "üî¥"
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {domain.name} ({len(domain.urls)} URL)",
                callback_data=f"domain_{domain.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")
    )
    
    await callback.message.edit_text(
        "üìã <b>–î–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "back")
async def callback_back(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    await callback.answer()
    await callback.message.delete()


@router.callback_query(F.data == "back_to_clients")
async def callback_back_to_clients(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    clients = await db_manager.get_all_clients()
    
    await callback.message.edit_text(
        f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã ({len(clients)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_clients_keyboard(clients)
    )


@router.message(Command("add_client"))
async def cmd_add_client(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä @username) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "<b>–í–∞–∂–Ω–æ:</b> –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )
    await state.set_state(AddClientStates.waiting_for_identifier)


@router.message(AddClientStates.waiting_for_identifier)
async def process_client_identifier(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    identifier = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ - username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    username = None
    phone = None
    
    if identifier.startswith('@') or not identifier.startswith('+'):
        # –≠—Ç–æ username
        username = identifier.lstrip('@')
    else:
        # –≠—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        phone = identifier
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = await db_manager.get_user_by_username_or_phone(identifier)
    if existing_user:
        if existing_user.role == "admin":
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="HTML"
            )
            return
        else:
            await message.answer(
                "‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!\n\n"
                f"üë§ Username: @{existing_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {existing_user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–µ–º—É –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ /add",
                parse_mode="HTML"
            )
            await state.clear()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    existing_pending = await db_manager.get_pending_client_by_username_or_phone(username, phone)
    if existing_pending:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ.\n\n"
            "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        pending_client = await db_manager.create_pending_client(
            username=username,
            phone=phone,
            invited_by=message.from_user.id
        )
        
        display_identifier = f"@{username}" if username else phone
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {display_identifier}\n\n"
            f"<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>\n"
            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n\n"
            f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–µ–º—É –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ /add",
            parse_mode="HTML"
        )
        
        logger.info(f"Admin {message.from_user.id} created pending client: {display_identifier}")
        
    except Exception as e:
        logger.error(f"Error creating pending client: {e}", exc_info=True)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("assign_domain_"))
async def callback_assign_domain(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–º–µ–Ω–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤"""
    await callback.answer()
    
    client_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    all_domains = await db_manager.get_domains()
    
    if not all_domains:
        await callback.message.edit_text(
            "üìã <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ /add",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    client_domains = await db_manager.get_domains_by_client(client_id)
    client_domain_ids = [d.id for d in client_domains]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–º–µ–Ω—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    available_domains = [d for d in all_domains if d.id not in client_domain_ids]
    
    if not available_domains:
        await callback.message.edit_text(
            "üìã <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏</b>\n\n"
            "–í—Å–µ –¥–æ–º–µ–Ω—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for domain in available_domains:
        builder.row(
            InlineKeyboardButton(
                text=f"üåê {domain.name} ({len(domain.urls)} URL)",
                callback_data=f"link_domain_{client_id}_{domain.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")
    )
    
    await callback.message.edit_text(
        "üîó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("link_domain_"))
async def callback_link_domain(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É"""
    await callback.answer()
    
    parts = callback.data.split("_")
    client_id = int(parts[2])
    domain_id = int(parts[3])
    
    try:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É
        domain = await db_manager.assign_domain_to_client(domain_id, client_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        user = await db_manager.get_user_by_id(client_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        if user:
            if user.first_name:
                display_name = user.first_name
                if user.last_name:
                    display_name += f" {user.last_name}"
            elif user.username:
                display_name = f"@{user.username}"
            else:
                display_name = f"ID:{user.id}"
        else:
            display_name = f"ID:{client_id}"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ–º–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {display_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –¥–æ–º–µ–Ω–æ–º –∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"Domain {domain.name} (ID:{domain_id}) assigned to client {client_id}")
        
    except Exception as e:
        logger.error(f"Error linking domain {domain_id} to client {client_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –¥–æ–º–µ–Ω–∞:\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )


@router.message(Command("restore_backup"))
async def cmd_restore_backup(message: Message, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞"""
    try:
        from pathlib import Path
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
        backup_dir = Path("./backups")
        
        if not backup_dir.exists():
            await message.answer(
                "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ /backup",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        backups = sorted(
            backup_dir.glob("siteheater_backup_*.sql.gz*"),
            key=os.path.getmtime,
            reverse=True
        )
        
        if not backups:
            await message.answer(
                "üìÇ –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ /backup",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
        backup_list = []
        for i, backup in enumerate(backups[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
            size_mb = backup.stat().st_size / (1024 * 1024)
            mtime = datetime.fromtimestamp(backup.stat().st_mtime)
            backup_list.append(
                f"{i}. <code>{backup.name}</code>\n"
                f"   üì¶ {size_mb:.2f} MB | üïê {mtime.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –≤ state
        await state.update_data(backups=[b.name for b in backups[:20]])
        await state.set_state(RestoreBackupStates.waiting_for_backup_selection)
        
        await message.answer(
            f"üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):\n\n"
            f"{''.join([f'{b}\n' for b in backup_list])}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (1-{len(backups[:20])}):",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error listing backups: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤:\n{str(e)}")


@router.message(RestoreBackupStates.waiting_for_backup_selection)
async def process_backup_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—ç–∫–∞–ø–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞
        backup_number = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –∏–∑ state
        data = await state.get_data()
        backups = data.get('backups', [])
        
        if backup_number < 1 or backup_number > len(backups):
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(backups)}",
                parse_mode="HTML"
            )
            return
        
        selected_backup = backups[backup_number - 1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø
        await state.update_data(selected_backup=selected_backup)
        await state.set_state(RestoreBackupStates.waiting_for_confirmation)
        
        await message.answer(
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –±—ç–∫–∞–ø–∞:\n"
            f"<code>{selected_backup}</code>\n\n"
            f"‚ùóÔ∏è –í–°–ï –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´!\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: <b>YES</b>\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ: <b>NO</b>",
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞")
    except Exception as e:
        logger.error(f"Error selecting backup: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@router.message(RestoreBackupStates.waiting_for_confirmation)
async def process_restore_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        confirmation = message.text.strip().upper()
        
        if confirmation == "NO":
            await state.clear()
            await message.answer("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        if confirmation != "YES":
            await message.answer(
                "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>YES</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <b>NO</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø
        data = await state.get_data()
        selected_backup = data.get('selected_backup')
        
        if not selected_backup:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±—ç–∫–∞–ø –Ω–µ –≤—ã–±—Ä–∞–Ω")
            await state.clear()
            return
        
        await message.answer(
            "üîÑ <b>–ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...</b>\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        import subprocess
        
        result = subprocess.run(
            [
                "docker-compose", "-f", "docker-compose.secure.yml", "stop", "app"
            ],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        result = subprocess.run(
            [
                "docker-compose", "-f", "docker-compose.secure.yml", "run", "--rm",
                "--entrypoint", "/bin/sh",
                "backup",
                "-c", f"apk add --no-cache openssl bash && bash /scripts/restore_db.sh /app/backups/{selected_backup}"
            ],
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç
        )
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        subprocess.run(
            ["docker-compose", "-f", "docker-compose.secure.yml", "start", "app"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            await message.answer(
                "‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑: <code>{selected_backup}</code>\n\n"
                "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
                parse_mode="HTML"
            )
            logger.info(f"Database restored from backup: {selected_backup}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!</b>\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
                f"Stderr: {result.stderr[:500]}",
                parse_mode="HTML"
            )
            logger.error(f"Backup restore failed: {result.stderr}")
        
        await state.clear()
        
    except subprocess.TimeoutExpired:
        await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        await state.clear()
    except Exception as e:
        logger.error(f"Error restoring backup: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
__all__ = ['router']

