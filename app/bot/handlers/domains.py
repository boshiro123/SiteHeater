"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–µ–Ω–∞–º–∏
"""
import logging
import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app.bot.keyboards.inline import (
    get_domains_keyboard,
    get_domain_actions_keyboard,
    get_schedule_keyboard,
    get_delete_confirm_keyboard,
    get_stats_period_keyboard,
    get_warming_group_keyboard,
)
from app.core.db import db_manager
from app.core.warmer import warmer
from app.core.scheduler import warming_scheduler
from app.core.warming_manager import warming_manager
from app.utils.graph import graph_generator
from app.utils.url_grouper import url_grouper
from datetime import datetime, timedelta
from aiogram.types import BufferedInputFile

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("domains"))
async def cmd_domains(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /domains - —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
    user = await db_manager.register_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –í–°–ï –¥–æ–º–µ–Ω—ã, –∫–ª–∏–µ–Ω—Ç—ã - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
    if user.role == "admin":
        domains = await db_manager.get_all_domains(user_id=None)
        title = "–í—Å–µ –¥–æ–º–µ–Ω—ã"
    else:
        domains = await db_manager.get_domains_by_client(user.id)
        title = "–í–∞—à–∏ –¥–æ–º–µ–Ω—ã"
    
    if not domains:
        await message.answer(
            f"üì≠ {'–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤' if user.role == 'admin' else '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤'}.\n\n"
            f"{'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞.' if user.role == 'admin' else '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤.'}"
        )
        return
    
    await message.answer(
        f"üìã <b>{title} ({len(domains)}):</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_domains_keyboard(domains)
    )


@router.callback_query(F.data == "back_to_domains")
async def callback_back_to_domains(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
    user = await db_manager.register_user(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –í–°–ï –¥–æ–º–µ–Ω—ã, –∫–ª–∏–µ–Ω—Ç—ã - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
    if user.role == "admin":
        domains = await db_manager.get_all_domains(user_id=None)
        title = "–í—Å–µ –¥–æ–º–µ–Ω—ã"
    else:
        domains = await db_manager.get_domains_by_client(user.id)
        title = "–í–∞—à–∏ –¥–æ–º–µ–Ω—ã"
    
    if not domains:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤.")
        return
    
    await callback.message.edit_text(
        f"üìã <b>{title} ({len(domains)}):</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_domains_keyboard(domains)
    )


@router.callback_query(F.data.startswith("domain_"))
async def callback_domain_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    has_active_job = any(job.active for job in domain.jobs)
    
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if domain.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    urls_count = len(domain.urls)
    
    job_info = ""
    if has_active_job:
        active_job = next((job for job in domain.jobs if job.active), None)
        if active_job:
            job_info = f"\n‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <b>{active_job.schedule}</b>"
            if active_job.last_run:
                job_info += f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {active_job.last_run.strftime('%Y-%m-%d %H:%M')}"
    
    text = (
        f"üåê <b>{domain.name}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: <b>{urls_count}</b>\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {domain.created_at.strftime('%Y-%m-%d %H:%M')}"
        f"{job_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_domain_actions_keyboard(domain_id, has_active_job)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_domain_actions_keyboard(domain_id, has_active_job)
        )


# –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ!
@router.callback_query(F.data.startswith("warm_group_"))
async def callback_warm_group(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    await callback.answer("üî• –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≥—Ä–µ–≤...")
    
    parts = callback.data.split("_")
    domain_id = int(parts[2])
    group = int(parts[3])
    
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç URL.")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º URL –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    all_urls = [url.url for url in domain.urls]
    urls = url_grouper.filter_urls_by_group(all_urls, domain.name, group)
    
    logger.info(f"Warming domain {domain.name} (group {group}): {len(urls)}/{len(all_urls)} URLs")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    started = await warming_manager.start_warming(
        domain_id=domain_id,
        domain_name=domain.name,
        urls=urls,
        user_id=callback.from_user.id,
        bot=callback.bot
    )
    
    if started:
        active_count = warming_manager.get_active_count()
        await callback.answer("üî• –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω!", show_alert=False)
        await callback.message.answer(
            f"üöÄ <b>–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
            f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: <b>{len(domain.urls)}</b>\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤: <b>{active_count}</b>\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )
    else:
        await callback.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤",
            show_alert=True
        )


@router.callback_query(F.data.startswith("warm_once_"))
async def callback_warm_once(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç URL.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ–≤ —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
    if warming_manager.is_warming(domain_id):
        await callback.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ–≤ {domain.name} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
    all_urls = [url.url for url in domain.urls]
    stats = url_grouper.get_group_stats(all_urls, domain.name)
    
    await callback.message.edit_text(
        f"üî• <b>–†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤</b>\n\n"
        f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É URL:\n"
        f"üè† –ì—Ä—É–ø–ø–∞ 1: <b>{stats[1]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–∞—è)\n"
        f"üìÑ –ì—Ä—É–ø–ø–∞ 2: <b>{stats[2]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (–æ—Å–Ω–æ–≤–Ω—ã–µ)\n"
        f"üåê –ì—Ä—É–ø–ø–∞ 3: <b>{stats[3]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ)",
        parse_mode="HTML",
        reply_markup=get_warming_group_keyboard(domain_id, action="warm")
    )


# –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –í–´–®–ï!
@router.callback_query(F.data.startswith("set_schedule_"))
async def callback_set_schedule(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    parts = callback.data.split("_")
    domain_id = int(parts[2])
    group = int(parts[3])
    schedule = parts[4]
    
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
        job = await db_manager.create_job(domain_id, schedule, active=True, active_url_group=group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        success = warming_scheduler.add_job(domain_id, job.id, schedule)
        
        if success:
            group_desc = url_grouper.get_group_description(group)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
                f"üìä –ì—Ä—É–ø–ø–∞: {group_desc}\n"
                f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞: <b>{schedule}</b>\n\n"
                f"–ü—Ä–æ–≥—Ä–µ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML",
                reply_markup=get_domain_actions_keyboard(domain_id, has_active_job=True)
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
        
    except Exception as e:
        logger.error(f"Error setting schedule for domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )


@router.callback_query(F.data.startswith("schedule_group_"))
async def callback_schedule_group(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    await callback.answer()
    
    parts = callback.data.split("_")
    domain_id = int(parts[2])
    group = int(parts[3])
    
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    group_desc = url_grouper.get_group_description(group)
    
    await callback.message.edit_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {domain.name}</b>\n\n"
        f"üìä –ì—Ä—É–ø–ø–∞: {group_desc}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≥—Ä–µ–≤–∞:",
        parse_mode="HTML",
        reply_markup=get_schedule_keyboard(domain_id, group)
    )


@router.callback_query(F.data.startswith("schedule_"))
async def callback_schedule(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
    all_urls = [url.url for url in domain.urls]
    stats = url_grouper.get_group_stats(all_urls, domain.name)
    
    await callback.message.edit_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n\n"
        f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É URL:\n"
        f"üè† –ì—Ä—É–ø–ø–∞ 1: <b>{stats[1]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–∞—è)\n"
        f"üìÑ –ì—Ä—É–ø–ø–∞ 2: <b>{stats[2]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (–æ—Å–Ω–æ–≤–Ω—ã–µ)\n"
        f"üåê –ì—Ä—É–ø–ø–∞ 3: <b>{stats[3]}</b> —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ)",
        parse_mode="HTML",
        reply_markup=get_warming_group_keyboard(domain_id, action="schedule")
    )


@router.callback_query(F.data.startswith("stop_schedule_"))
async def callback_stop_schedule(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ
        await db_manager.deactivate_jobs_for_domain(domain_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        warming_scheduler.remove_job(domain_id)
        
        await callback.message.edit_text(
            f"‚èπ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –æ—Ç–∫–ª—é—á–µ–Ω.",
            parse_mode="HTML",
            reply_markup=get_domain_actions_keyboard(domain_id, has_active_job=False)
        )
        
    except Exception as e:
        logger.error(f"Error stopping schedule for domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("show_urls_"))
async def callback_show_urls(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ URL –¥–æ–º–µ–Ω–∞"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.message.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL
    urls_text = "\n".join(f"{i+1}. {url.url}" for i, url in enumerate(domain.urls[:20]))
    
    if len(domain.urls) > 20:
        urls_text += f"\n\n... –∏ –µ—â–µ {len(domain.urls) - 20} URL"
    
    await callback.message.answer(
        f"üìã <b>URL –¥–ª—è {domain.name}</b>\n\n"
        f"–í—Å–µ–≥–æ: <b>{len(domain.urls)}</b>\n\n"
        f"{urls_text}",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–µ confirm_delete
    if callback.data.startswith("delete_") and not callback.data.startswith("confirm_delete_"):
        domain_id = int(callback.data.split("_")[1])
        domain = await db_manager.get_domain_by_id(domain_id)
        
        if not domain:
            await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>{domain.name}</b>?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=get_delete_confirm_keyboard(domain_id)
        )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def callback_confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
    await callback.answer("üóë –£–¥–∞–ª—è—é...")
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    domain_name = domain.name
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        warming_scheduler.remove_job(domain_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        success = await db_manager.delete_domain(domain_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –î–æ–º–µ–Ω <b>{domain_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞.")
        
    except Exception as e:
        logger.error(f"Error deleting domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("stats_"))
async def callback_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {domain.name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        parse_mode="HTML",
        reply_markup=get_stats_period_keyboard(domain_id)
    )


@router.callback_query(F.data.startswith("show_stats_"))
async def callback_show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    parts = callback.data.split("_")
    domain_id = int(parts[2])
    period = parts[3]
    
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if period == "24h":
            start_date = datetime.utcnow() - timedelta(hours=24)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
        elif period == "7d":
            start_date = datetime.utcnow() - timedelta(days=7)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        elif period == "30d":
            start_date = datetime.utcnow() - timedelta(days=30)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        else:  # all
            start_date = datetime.utcnow() - timedelta(days=365)  # –≥–æ–¥ –Ω–∞–∑–∞–¥
            period_name = "–∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
        history = await db_manager.get_warming_history_by_period(
            domain_id=domain_id,
            start_date=start_date,
            end_date=datetime.utcnow()
        )
        
        if not history:
            await callback.message.edit_text(
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {domain.name}</b>\n\n"
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö {period_name}.\n\n"
                f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≥—Ä–µ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                parse_mode="HTML",
                reply_markup=get_stats_period_keyboard(domain_id)
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph_buf = graph_generator.generate_combined_graph(history, domain.name)
        
        if not graph_buf:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_stats_period_keyboard(domain_id)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_time = sum(h.avg_response_time for h in history) / len(history)
        avg_success_rate = sum(
            (h.successful_requests / h.total_requests * 100) if h.total_requests > 0 else 0
            for h in history
        ) / len(history)
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {domain.name}</b>\n"
            f"{period_name}\n\n"
            f"üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: <b>{len(history)}</b>\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>{avg_time:.2f}s</b>\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{avg_success_rate:.1f}%</b>\n\n"
            f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        photo = BufferedInputFile(graph_buf.read(), filename=f"stats_{domain.name}_{period}.png")
        await callback.message.answer_photo(
            photo=photo,
            caption=stats_text,
            parse_mode="HTML",
            reply_markup=get_stats_period_keyboard(domain_id)
        )
        
        logger.info(f"Sent statistics graph for {domain.name} (period: {period})")
        
    except Exception as e:
        logger.error(f"Error showing statistics for domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_stats_period_keyboard(domain_id)
        )
