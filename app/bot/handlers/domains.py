"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–µ–Ω–∞–º–∏
"""
import logging
import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app.bot.keyboards.inline import (
    get_domains_keyboard,
    get_domain_actions_keyboard,
    get_schedule_keyboard,
    get_delete_confirm_keyboard,
)
from app.core.db import db_manager
from app.core.warmer import warmer
from app.core.scheduler import warming_scheduler

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("domains"))
async def cmd_domains(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /domains - —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤"""
    domains = await db_manager.get_all_domains(user_id=message.from_user.id)
    
    if not domains:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞."
        )
        return
    
    await message.answer(
        f"üìã <b>–í–∞—à–∏ –¥–æ–º–µ–Ω—ã ({len(domains)}):</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_domains_keyboard(domains)
    )


@router.callback_query(F.data == "back_to_domains")
async def callback_back_to_domains(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω–æ–≤"""
    await callback.answer()
    
    domains = await db_manager.get_all_domains(user_id=callback.from_user.id)
    
    if not domains:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        )
        return
    
    await callback.message.edit_text(
        f"üìã <b>–í–∞—à–∏ –¥–æ–º–µ–Ω—ã ({len(domains)}):</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_domains_keyboard(domains)
    )


@router.callback_query(F.data.startswith("domain_"))
async def callback_domain_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    has_active_job = any(job.active for job in domain.jobs)
    
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if domain.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    urls_count = len(domain.urls)
    
    job_info = ""
    if has_active_job:
        active_job = next((job for job in domain.jobs if job.active), None)
        if active_job:
            job_info = f"\n‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <b>{active_job.schedule}</b>"
            if active_job.last_run:
                job_info += f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {active_job.last_run.strftime('%Y-%m-%d %H:%M')}"
    
    await callback.message.edit_text(
        f"üåê <b>{domain.name}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: <b>{urls_count}</b>\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {domain.created_at.strftime('%Y-%m-%d %H:%M')}"
        f"{job_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_domain_actions_keyboard(domain_id, has_active_job)
    )


@router.callback_query(F.data.startswith("warm_once_"))
async def callback_warm_once(callback: CallbackQuery):
    """–†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–æ–º–µ–Ω–∞"""
    await callback.answer("üî• –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≥—Ä–µ–≤...")
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç URL.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
    status_msg = await callback.message.answer(
        f"üî• –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥—Ä–µ–≤ <b>{domain.name}</b>...\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü: {len(domain.urls)}",
        parse_mode="HTML"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤
        urls = [url.url for url in domain.urls]
        stats = await warmer.warm_site(urls)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        success_rate = (stats["success"] / stats["total_requests"] * 100) if stats["total_requests"] > 0 else 0
        
        await status_msg.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{stats['success']}</b> ({success_rate:.1f}%)\n"
            f"‚è± –¢–∞–π–º–∞—É—Ç—ã: <b>{stats['timeout']}</b>\n"
            f"‚ùå –û—à–∏–±–∫–∏: <b>{stats['error']}</b>\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>{stats['avg_time']:.2f}s</b>\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{stats['total_time']:.2f}s</b>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error warming domain {domain.name}: {e}", exc_info=True)
        await status_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ: {str(e)}"
        )


@router.callback_query(F.data.startswith("schedule_"))
async def callback_schedule(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await callback.message.edit_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {domain.name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≥—Ä–µ–≤–∞:",
        parse_mode="HTML",
        reply_markup=get_schedule_keyboard(domain_id)
    )


@router.callback_query(F.data.startswith("set_schedule_"))
async def callback_set_schedule(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    parts = callback.data.split("_")
    domain_id = int(parts[2])
    schedule = parts[3]
    
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ
        job = await db_manager.create_job(domain_id, schedule, active=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        success = warming_scheduler.add_job(domain_id, job.id, schedule)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
                f"‚è∞ –ß–∞—Å—Ç–æ—Ç–∞: <b>{schedule}</b>\n\n"
                f"–ü—Ä–æ–≥—Ä–µ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML",
                reply_markup=get_domain_actions_keyboard(domain_id, has_active_job=True)
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )
        
    except Exception as e:
        logger.error(f"Error setting schedule for domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )


@router.callback_query(F.data.startswith("stop_schedule_"))
async def callback_stop_schedule(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ
        await db_manager.deactivate_jobs_for_domain(domain_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        warming_scheduler.remove_job(domain_id)
        
        await callback.message.edit_text(
            f"‚èπ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –æ—Ç–∫–ª—é—á–µ–Ω.",
            parse_mode="HTML",
            reply_markup=get_domain_actions_keyboard(domain_id, has_active_job=False)
        )
        
    except Exception as e:
        logger.error(f"Error stopping schedule for domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("show_urls_"))
async def callback_show_urls(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ URL –¥–æ–º–µ–Ω–∞"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.message.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL
    urls_text = "\n".join(f"{i+1}. {url.url}" for i, url in enumerate(domain.urls[:20]))
    
    if len(domain.urls) > 20:
        urls_text += f"\n\n... –∏ –µ—â–µ {len(domain.urls) - 20} URL"
    
    await callback.message.answer(
        f"üìã <b>URL –¥–ª—è {domain.name}</b>\n\n"
        f"–í—Å–µ–≥–æ: <b>{len(domain.urls)}</b>\n\n"
        f"{urls_text}",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–µ confirm_delete
    if callback.data.startswith("delete_") and not callback.data.startswith("confirm_delete_"):
        domain_id = int(callback.data.split("_")[1])
        domain = await db_manager.get_domain_by_id(domain_id)
        
        if not domain:
            await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>{domain.name}</b>?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=get_delete_confirm_keyboard(domain_id)
        )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def callback_confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
    await callback.answer("üóë –£–¥–∞–ª—è—é...")
    
    domain_id = int(callback.data.split("_")[2])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain:
        await callback.message.edit_text("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    domain_name = domain.name
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        warming_scheduler.remove_job(domain_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        success = await db_manager.delete_domain(domain_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –î–æ–º–µ–Ω <b>{domain_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞.")
        
    except Exception as e:
        logger.error(f"Error deleting domain {domain_id}: {e}", exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

