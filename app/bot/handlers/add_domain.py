"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
"""
import logging
from urllib.parse import urlparse

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.bot.states import AddDomainStates
from app.bot.keyboards.inline import get_confirm_urls_keyboard
from app.core.db import db_manager
from app.utils.sitemap import sitemap_parser

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("add"))
async def cmd_add_domain(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /add <domain>"""
    # –ü–∞—Ä—Å–∏–º –¥–æ–º–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.strip()
    parts = text.split(maxsplit=1)
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add example.com</code>",
            parse_mode="HTML"
        )
        return
    
    domain = parts[1].strip()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ–º–µ–Ω
    if domain.startswith(('http://', 'https://')):
        parsed = urlparse(domain)
        domain = parsed.netloc
    
    if not domain:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–º–µ–Ω
    existing_domain = await db_manager.get_domain_by_name(domain)
    if existing_domain and existing_domain.user_id == message.from_user.id:
        await message.answer(
            f"‚ö†Ô∏è –î–æ–º–µ–Ω <b>{domain}</b> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domains –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_msg = await message.answer(
        f"üîç –ò—â—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ <b>{domain}</b>...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL
        urls = await sitemap_parser.discover_urls(domain)
        
        if not urls:
            await status_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è <b>{domain}</b>.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ URL –≤—Ä—É—á–Ω—É—é:\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
                parse_mode="HTML"
            )
            await state.set_state(AddDomainStates.waiting_for_custom_urls)
            await state.update_data(domain=domain)
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_urls = urls[:10]
        urls_text = "\n".join(f"‚Ä¢ {url}" for url in display_urls)
        
        if len(urls) > 10:
            urls_text += f"\n\n... –∏ –µ—â–µ {len(urls) - 10} URL"
        
        await status_msg.edit_text(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ <b>{len(urls)}</b> —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è <b>{domain}</b>:\n\n"
            f"{urls_text}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º?",
            parse_mode="HTML",
            reply_markup=get_confirm_urls_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AddDomainStates.waiting_for_confirmation)
        await state.update_data(domain=domain, urls=urls, message_id=status_msg.message_id)
        
    except Exception as e:
        logger.error(f"Error discovering URLs for {domain}: {e}", exc_info=True)
        await status_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ URL –≤—Ä—É—á–Ω—É—é:\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            parse_mode="HTML"
        )
        await state.set_state(AddDomainStates.waiting_for_custom_urls)
        await state.update_data(domain=domain)


@router.callback_query(F.data == "confirm_urls", AddDomainStates.waiting_for_confirmation)
async def callback_confirm_urls(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URL"""
    await callback.answer()
    
    data = await state.get_data()
    domain = data.get("domain")
    urls = data.get("urls", [])
    
    if not domain or not urls:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await db_manager.create_domain(
            name=domain,
            user_id=callback.from_user.id,
            urls=urls
        )
        
        await callback.message.edit_text(
            f"‚úÖ –î–æ–º–µ–Ω <b>{domain}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ <b>{len(urls)}</b> —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domains –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error saving domain {domain}: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: {str(e)}"
        )
    
    await state.clear()


@router.callback_query(F.data == "reject_urls", AddDomainStates.waiting_for_confirmation)
async def callback_reject_urls(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URL"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
    )
    
    await state.clear()


@router.callback_query(F.data == "custom_urls", AddDomainStates.waiting_for_confirmation)
async def callback_custom_urls(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ URL"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ URL.\n\n"
        "–§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π URL —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>https://example.com/page1, https://example.com/page2</code>\n\n"
        "–∏–ª–∏\n\n"
        "<code>https://example.com/page1\n"
        "https://example.com/page2</code>",
        parse_mode="HTML"
    )
    
    await state.set_state(AddDomainStates.waiting_for_custom_urls)


@router.message(AddDomainStates.waiting_for_custom_urls)
async def process_custom_urls(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ URL"""
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º URL
    urls = []
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π
    if ',' in text:
        urls = [url.strip() for url in text.split(',')]
    else:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
        urls = [url.strip() for url in text.split('\n')]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ URL
    valid_urls = []
    for url in urls:
        if url and url.startswith(('http://', 'https://')):
            valid_urls.append(url)
    
    if not valid_urls:
        await message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL.\n\n"
            "URL –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
        )
        return
    
    data = await state.get_data()
    domain = data.get("domain")
    
    if not domain:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await db_manager.create_domain(
            name=domain,
            user_id=message.from_user.id,
            urls=valid_urls
        )
        
        await message.answer(
            f"‚úÖ –î–æ–º–µ–Ω <b>{domain}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ <b>{len(valid_urls)}</b> —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domains –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error saving domain {domain}: {e}", exc_info=True)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: {str(e)}"
        )
    
    await state.clear()

