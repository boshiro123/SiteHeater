"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞
"""
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from app.core.db import db_manager
from app.core.cache_diagnostics import cache_diagnostics

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data.startswith("diagnose_"))
async def callback_diagnose_cache(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Å—Ç—ã–≤–∞–Ω–∏—è –∫—ç—à–∞"""
    await callback.answer()
    
    domain_id = int(callback.data.split("_")[1])
    domain = await db_manager.get_domain_by_id(domain_id)
    
    if not domain or not domain.urls:
        await callback.message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç URL.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if cache_diagnostics.is_diagnostic_running(domain_id):
        await callback.answer(
            "‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞!",
            show_alert=True
        )
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    urls = [url.url for url in domain.urls]
    started = await cache_diagnostics.start_diagnostic(
        domain_id=domain_id,
        domain_name=domain.name,
        urls=urls,
        user_id=callback.from_user.id,
        bot=callback.bot
    )
    
    if started:
        await callback.message.answer(
            f"üî¨ <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"üåê –î–æ–º–µ–Ω: <b>{domain.name}</b>\n"
            f"üß™ –¢–µ—Å—Ç–æ–≤: <b>6</b> (T+0, 5, 10, 15, 20, 30 –º–∏–Ω—É—Ç)\n"
            f"üìä –í—ã–±–æ—Ä–∫–∞: <b>10</b> —Å–ª—É—á–∞–π–Ω—ã—Ö URL\n\n"
            f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç ~30 –º–∏–Ω—É—Ç\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            parse_mode="HTML"
        )
    else:
        await callback.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
            show_alert=True
        )


@router.message(Command("performance"))
async def cmd_performance(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /performance - —Å–æ–≤–µ—Ç—ã –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    tips = """
üöÄ <b>–°–æ–≤–µ—Ç—ã –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>

<b>1. –£–≤–µ–ª–∏—á—å—Ç–µ WARMER_CONCURRENCY</b>
–¢–µ–∫—É—â–µ–µ: 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: <b>15-20</b>

<code>WARMER_CONCURRENCY=15</code>

<b>2. –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏</b>
<code>WARMER_MIN_DELAY=0.3
WARMER_MAX_DELAY=1.0</code>

<b>3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ chunk size</b>
–î–ª—è –±–æ–ª—å—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤ (1000+ URL):
<code>WARMER_CHUNK_SIZE=300</code>

<b>4. –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—ã (–µ—Å–ª–∏ –∫—ç—à —Å—Ç–∞–±–∏–ª–µ–Ω)</b>
<code>WARMER_REPEAT_COUNT=1</code>

<b>üìä –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ:</b>
‚Ä¢ –ë—ã–ª–æ: ~45 –º–∏–Ω—É—Ç –Ω–∞ 1600 URL
‚Ä¢ –°—Ç–∞–Ω–µ—Ç: ~10-12 –º–∏–Ω—É—Ç (3-4x –±—ã—Å—Ç—Ä–µ–µ!)

<b>‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:</b>
<code>WARMER_CONCURRENCY=20
WARMER_MIN_DELAY=0.3
WARMER_MAX_DELAY=1.0
WARMER_CHUNK_SIZE=400
WARMER_REPEAT_COUNT=2</code>

<b>–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å:</b>
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: <code>docker-compose restart app</code>

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /diagnose –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞!
    """
    
    await message.answer(tips, parse_mode="HTML")

