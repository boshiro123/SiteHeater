"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from typing import List

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models.domain import Domain


def get_confirm_urls_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ URL"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_urls"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_urls"),
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫", callback_data="custom_urls"),
    )
    
    return builder.as_markup()


def get_domains_keyboard(domains: List[Domain]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    for domain in domains:
        status = "üü¢" if domain.is_active else "üî¥"
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {domain.name}",
                callback_data=f"domain_{domain.id}"
            )
        )
    
    return builder.as_markup()


def get_domain_actions_keyboard(domain_id: int, has_active_job: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–º–µ–Ω–æ–º"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üî• –†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"warm_once_{domain_id}")
    )
    
    if not has_active_job:
        builder.row(
            InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{domain_id}")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"stop_schedule_{domain_id}")
        )
    
    builder.row(
        InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å URL", callback_data=f"show_urls_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω", callback_data=f"delete_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_domains")
    )
    
    return builder.as_markup()


def get_schedule_keyboard(domain_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    builder = InlineKeyboardBuilder()
    
    schedules = [
        ("–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç", "5m"),
        ("–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", "15m"),
        ("–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç", "30m"),
        ("–ö–∞–∂–¥—ã–π —á–∞—Å", "1h"),
        ("–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞", "2h"),
        ("–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", "6h"),
    ]
    
    for text, schedule in schedules:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"set_schedule_{domain_id}_{schedule}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"domain_{domain_id}")
    )
    
    return builder.as_markup()


def get_delete_confirm_keyboard(domain_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{domain_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"domain_{domain_id}"),
    )
    
    return builder.as_markup()

