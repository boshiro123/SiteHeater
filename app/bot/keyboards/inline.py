"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from typing import List

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models.domain import Domain


def get_confirm_urls_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ URL"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_urls"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_urls"),
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫", callback_data="custom_urls"),
    )
    
    return builder.as_markup()


def get_domains_keyboard(domains: List[Domain]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    for domain in domains:
        status = "üü¢" if domain.is_active else "üî¥"
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {domain.name}",
                callback_data=f"domain_{domain.id}"
            )
        )
    
    return builder.as_markup()


def get_domain_actions_keyboard(domain_id: int, has_active_job: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–º–µ–Ω–æ–º"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üî• –†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"warm_once_{domain_id}")
    )
    
    if not has_active_job:
        builder.row(
            InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{domain_id}")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"stop_schedule_{domain_id}")
        )
    
    builder.row(
        InlineKeyboardButton(text="üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞", callback_data=f"diagnose_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å URL", callback_data=f"show_urls_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω", callback_data=f"delete_{domain_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_domains")
    )
    
    return builder.as_markup()


def get_schedule_keyboard(domain_id: int, group: int = 3) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    builder = InlineKeyboardBuilder()
    
    schedules = [
        ("–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç", "5m"),
        ("–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", "15m"),
        ("–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç", "30m"),
        ("–ö–∞–∂–¥—ã–π —á–∞—Å", "1h"),
        ("–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞", "2h"),
        ("–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", "6h"),
    ]
    
    for text, schedule in schedules:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"set_schedule_{domain_id}_{group}_{schedule}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"domain_{domain_id}")
    )
    
    return builder.as_markup()


def get_delete_confirm_keyboard(domain_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{domain_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"domain_{domain_id}"),
    )
    
    return builder.as_markup()


def get_stats_period_keyboard(domain_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    periods = [
        ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", "24h"),
        ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "7d"),
        ("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "30d"),
        ("üìÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", "all"),
    ]
    
    for text, period in periods:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"show_stats_{domain_id}_{period}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"domain_{domain_id}")
    )
    
    return builder.as_markup()


def get_url_group_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã URL –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    groups = [
        ("üè† –ì—Ä—É–ø–ø–∞ 1: –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–∞—è", "group_1"),
        ("üìÑ –ì—Ä—É–ø–ø–∞ 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "group_2"),
        ("üåê –ì—Ä—É–ø–ø–∞ 3: –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "group_3"),
    ]
    
    for text, callback in groups:
        builder.row(
            InlineKeyboardButton(text=text, callback_data=callback)
        )
    
    return builder.as_markup()


def get_diagnostic_mode_keyboard(domain_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    modes = [
        ("‚òÄÔ∏è –¢–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ—Å—Ç (~15 –º–∏–Ω)", "day"),
        ("üåô –¢–æ–ª—å–∫–æ –Ω–æ—á–Ω–æ–π —Ç–µ—Å—Ç (~15 –º–∏–Ω)", "night"),
        ("‚òÄÔ∏èüåô –û–±–∞ —Ç–µ—Å—Ç–∞ (~30 –º–∏–Ω)", "both"),
    ]
    
    for text, mode in modes:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"diagnose_mode_{domain_id}_{mode}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"domain_{domain_id}")
    )
    
    return builder.as_markup()


def get_warming_group_keyboard(domain_id: int, action: str = "warm") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã URL –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
    
    Args:
        domain_id: ID –¥–æ–º–µ–Ω–∞
        action: "warm" –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞, "schedule" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    
    groups = [
        ("üè† –ì—Ä—É–ø–ø–∞ 1: –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–∞—è", "1"),
        ("üìÑ –ì—Ä—É–ø–ø–∞ 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "2"),
        ("üåê –ì—Ä—É–ø–ø–∞ 3: –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "3"),
    ]
    
    for text, group in groups:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"{action}_group_{domain_id}_{group}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"domain_{domain_id}")
    )
    
    return builder.as_markup()


def get_clients_keyboard(clients: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    for client in clients:
        display_name = f"@{client.username}" if client.username else client.phone or f"ID:{client.id}"
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {display_name}",
                callback_data=f"client_{client.id}"
            )
        )
    
    return builder.as_markup()


def get_client_actions_keyboard(client_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìã –î–æ–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"client_domains_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûï –ü—Ä–∏–≤—è–∑–∞—Ç—å –¥–æ–º–µ–Ω", callback_data=f"assign_domain_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_clients")
    )
    
    return builder.as_markup()


def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥" """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")
    )
    return builder.as_markup()


def get_select_client_keyboard(clients: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞" (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    builder.row(
        InlineKeyboardButton(text="üîπ –ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞ (–∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ–º–µ–Ω)", callback_data="select_client_none")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    for client in clients:
        display_name = f"@{client.username}" if client.username else client.phone or f"ID:{client.id}"
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {display_name}",
                callback_data=f"select_client_{client.id}"
            )
        )
    
    return builder.as_markup()
