"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import logging
import signal
import sys

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from app.config import config
from app.core.db import db_manager
from app.core.scheduler import warming_scheduler
from app.utils.logger import setup_logging

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from app.bot.handlers import start, add_domain, domains, help

logger = logging.getLogger(__name__)


class SiteHeaterApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.bot: Bot = None
        self.dp: Dispatcher = None
        self.shutdown_event = asyncio.Event()
    
    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("üöÄ Starting SiteHeater...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            config.validate()
        except ValueError as e:
            logger.error(f"‚ùå Configuration error: {e}")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            await db_manager.init_db()
            logger.info("‚úÖ Database initialized")
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}", exc_info=True)
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            warming_scheduler.start()
            await warming_scheduler.reload_jobs()
            logger.info("‚úÖ Scheduler started")
        except Exception as e:
            logger.error(f"‚ùå Scheduler start error: {e}", exc_info=True)
            sys.exit(1)
        
        logger.info("‚ú® SiteHeater started successfully!")
    
    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        logger.info("üõë Shutting down SiteHeater...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            warming_scheduler.shutdown()
            logger.info("‚úÖ Scheduler stopped")
        except Exception as e:
            logger.error(f"Error stopping scheduler: {e}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        try:
            await db_manager.close()
            logger.info("‚úÖ Database connection closed")
        except Exception as e:
            logger.error(f"Error closing database: {e}")
        
        logger.info("üëã SiteHeater stopped")
    
    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.dp.include_router(start.router)
        self.dp.include_router(help.router)
        self.dp.include_router(add_domain.router)
        self.dp.include_router(domains.router)
        
        logger.info("‚úÖ Handlers registered")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.dp.startup.register(self.on_startup)
        self.dp.shutdown.register(self.on_shutdown)
        
        # –ó–∞–ø—É—Å–∫ polling
        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=self.dp.resolve_used_update_types(),
            )
        except Exception as e:
            logger.error(f"‚ùå Error in polling: {e}", exc_info=True)
        finally:
            await self.bot.session.close()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    app = SiteHeaterApp()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    loop = asyncio.get_event_loop()
    
    def signal_handler(signum, frame):
        logger.info(f"Received signal {signum}")
        loop.create_task(app.on_shutdown())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    await app.run()


if __name__ == "__main__":
    asyncio.run(main())

