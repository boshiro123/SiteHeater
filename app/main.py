"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import logging
import signal
import sys

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from app.config import config
from app.core.db import db_manager
from app.core.scheduler import warming_scheduler
from app.core.warming_manager import warming_manager
from app.utils.logger import setup_logging

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from app.bot.handlers import start, add_domain, domains, help, status, diagnostics, admin
from app.bot.middlewares import UserRegistrationMiddleware

logger = logging.getLogger(__name__)


class SiteHeaterApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.bot: Bot = None
        self.dp: Dispatcher = None
        self.shutdown_event = asyncio.Event()
    
    async def run_migrations(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π Alembic"""
        try:
            from alembic.config import Config
            from alembic import command
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ alembic.ini
            alembic_cfg = Config("/app/alembic.ini")
            
            logger.info("üì¶ Running database migrations...")
            command.upgrade(alembic_cfg, "head")
            logger.info("‚úÖ Database migrations completed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Migration warning (may be first run): {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    
    async def setup_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–º–µ–Ω—é –∫–æ–º–∞–Ω–¥)"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–∞–∑–æ–≤—ã–µ, –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
            default_commands = [
                BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand(command="domains", description="üåê –ú–æ–∏ —Å–∞–π—Ç—ã"),
                BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–æ–≤"),
                BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            ]
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
            admin_commands = [
                BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
                BotCommand(command="domains", description="üåê –í—Å–µ –¥–æ–º–µ–Ω—ã"),
                BotCommand(command="add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω"),
                BotCommand(command="add_client", description="üë• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"),
                BotCommand(command="clients", description="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏"),
                BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–æ–≤"),
                BotCommand(command="restore_backup", description="üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î"),
            ]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.bot.set_my_commands(
                commands=default_commands,
                scope=BotCommandScopeDefault()
            )
            
            logger.info("‚úÖ Bot commands configured")
        except Exception as e:
            logger.error(f"‚ùå Error setting bot commands: {e}", exc_info=True)
    
    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("üöÄ Starting SiteHeater...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            config.validate()
        except ValueError as e:
            logger.error(f"‚ùå Configuration error: {e}")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
        await asyncio.to_thread(self.run_migrations)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            await db_manager.init_db()
            logger.info("‚úÖ Database initialized")
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}", exc_info=True)
            sys.exit(1)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await self.setup_bot_commands()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if config.SEND_WARMING_NOTIFICATIONS:
            if config.TECHNICAL_CHANNEL_ID:
                logger.info(f"üì¢ Warming notifications enabled ‚Üí Technical channel: {config.TECHNICAL_CHANNEL_ID}")
            else:
                logger.info("üì¢ Warming notifications enabled ‚Üí Admins")
        else:
            logger.info("üì¢ Warming notifications disabled")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            warming_scheduler.set_bot(self.bot)
            warming_scheduler.start()
            await warming_scheduler.reload_jobs()
            logger.info("‚úÖ Scheduler started")
        except Exception as e:
            logger.error(f"‚ùå Scheduler start error: {e}", exc_info=True)
            sys.exit(1)
        
        logger.info("‚ú® SiteHeater started successfully!")
    
    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        logger.info("üõë Shutting down SiteHeater...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
        try:
            await warming_manager.stop_all()
            logger.info("‚úÖ All warming tasks stopped")
        except Exception as e:
            logger.error(f"Error stopping warming tasks: {e}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            warming_scheduler.shutdown()
            logger.info("‚úÖ Scheduler stopped")
        except Exception as e:
            logger.error(f"Error stopping scheduler: {e}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        try:
            await db_manager.close()
            logger.info("‚úÖ Database connection closed")
        except Exception as e:
            logger.error(f"Error closing database: {e}")
        
        logger.info("üëã SiteHeater stopped")
    
    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.dp.message.middleware(UserRegistrationMiddleware())
        self.dp.callback_query.middleware(UserRegistrationMiddleware())
        
        self.dp.include_router(start.router)
        self.dp.include_router(help.router)
        self.dp.include_router(admin.router)  # –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.dp.include_router(status.router)
        self.dp.include_router(diagnostics.router)
        self.dp.include_router(add_domain.router)
        self.dp.include_router(domains.router)
        
        logger.info("‚úÖ Handlers registered")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.dp.startup.register(self.on_startup)
        self.dp.shutdown.register(self.on_shutdown)
        
        # –ó–∞–ø—É—Å–∫ polling
        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=self.dp.resolve_used_update_types(),
            )
        except Exception as e:
            logger.error(f"‚ùå Error in polling: {e}", exc_info=True)
        finally:
            await self.bot.session.close()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    app = SiteHeaterApp()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    loop = asyncio.get_event_loop()
    
    def signal_handler(signum, frame):
        logger.info(f"Received signal {signum}")
        loop.create_task(app.on_shutdown())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    await app.run()


if __name__ == "__main__":
    asyncio.run(main())

