# Multi-stage build для минимизации размера и уязвимостей

# Stage 1: Builder - сборка зависимостей
FROM python:3.11-slim AS builder

# Обновляем систему и устанавливаем только необходимое
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /build

# Копируем и устанавливаем зависимости
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Runtime - финальный образ
FROM python:3.11-slim

# БЕЗОПАСНОСТЬ: Создаем непривилегированного пользователя
RUN groupadd -r appuser -g 1000 && \
    useradd -r -u 1000 -g appuser -s /bin/false -d /app appuser

# Устанавливаем только runtime зависимости
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Копируем установленные пакеты из builder
COPY --from=builder /root/.local /home/appuser/.local

# Копируем код приложения
COPY --chown=appuser:appuser . .

# БЕЗОПАСНОСТЬ: Удаляем ненужные файлы
RUN rm -rf \
    /app/.git \
    /app/.github \
    /app/tests \
    /app/*.md \
    /app/Dockerfile* \
    /app/docker-compose* \
    /app/.env* \
    /app/scripts \
    && find /app -type f -name "*.pyc" -delete \
    && find /app -type d -name "__pycache__" -delete

# Создаем необходимые директории
RUN mkdir -p /app/.cache && chown appuser:appuser /app/.cache

# Переменные окружения
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH=/home/appuser/.local/bin:$PATH \
    PYTHONDONTWRITEBYTECODE=1

# БЕЗОПАСНОСТЬ: Переключаемся на непривилегированного пользователя
USER appuser

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import asyncio; from app.core.db import db_manager; asyncio.run(db_manager.health_check())" || exit 1

# Команда запуска
CMD ["python", "-m", "app.main"]

